package tfg.app.controller;

import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;

import org.apache.commons.io.FilenameUtils;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

import tfg.app.controller.workers.ChartWorker;
import tfg.app.controller.workers.FundWorker;
import tfg.app.controller.workers.ImportFundWorker;
import tfg.app.controller.workers.NodesWorker;
import tfg.app.controller.workers.PortfolioWorker;
import tfg.app.model.entities.FundDesc;
import tfg.app.model.entities.FundPort;
import tfg.app.model.entities.FundVl;
import tfg.app.model.entities.PortOp;
import tfg.app.model.service.FundService;
import tfg.app.model.service.FundServiceImpl;
import tfg.app.util.exceptions.InputValidationException;
import tfg.app.util.exceptions.InstanceNotFoundException;


@SuppressWarnings({ "unchecked", "rawtypes", "serial" })
public class Gui extends javax.swing.JFrame {

	/**
	 * Creates new form Pruebas
	 */
	public Gui() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	class JTextFieldLimit extends PlainDocument {
		private int limit;

		JTextFieldLimit(int limit) {
			super();
			this.limit = limit;
		}

		JTextFieldLimit(int limit, boolean upper) {
			super();
			this.limit = limit;
		}

		public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
			if (str == null)
				return;

			if ((getLength() + str.length()) <= limit) {
				super.insertString(offset, str, attr);
			}
		}
	}

	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		Image mainIcon = new ImageIcon(getClass().getResource("portfolio.png")).getImage();
		this.setIconImage(mainIcon);

		ventaBoton = new javax.swing.JRadioButton();
		compraBoton = new javax.swing.JRadioButton();
		buttonGroup1 = new javax.swing.ButtonGroup();
		buttonGroup2 = new javax.swing.ButtonGroup();
		panelGraficas = new javax.swing.JPanel();
		verVl = new javax.swing.JMenuItem();
		anadirFondo = new javax.swing.JDialog();
		anadirFondo.setIconImage(mainIcon);
		isinLabel = new javax.swing.JLabel();
		isinText = new javax.swing.JTextField();
		isinText.setDocument(new JTextFieldLimit(12));
		gestoraText = new javax.swing.JTextField();
		gestoraText.setDocument(new JTextFieldLimit(40));
		tipoText = new javax.swing.JTextField();
		tipoText.setDocument(new JTextFieldLimit(20));
		categoriaText = new javax.swing.JTextField();
		categoriaText.setDocument(new JTextFieldLimit(30));
		divisaText = new javax.swing.JTextField();
		divisaText.setDocument(new JTextFieldLimit(20));
		gestoraLabel = new javax.swing.JLabel();
		tipoLabel = new javax.swing.JLabel();
		categoriaLabel = new javax.swing.JLabel();
		divisaLabel = new javax.swing.JLabel();
		apComLabel = new javax.swing.JLabel();
		cancelComLabel = new javax.swing.JLabel();
		canAnaFondoBoton = new javax.swing.JButton();
		anadFondoBoton = new javax.swing.JButton();
		cancelComText = new javax.swing.JFormattedTextField();
		apComText = new javax.swing.JFormattedTextField();
		actuaFondo = new javax.swing.JDialog();
		actuaFondo.setIconImage(mainIcon);
		isinLabel1 = new javax.swing.JLabel();
		gestoraText1 = new javax.swing.JTextField();
		gestoraText1.setDocument(new JTextFieldLimit(40));
		tipoText1 = new javax.swing.JTextField();
		tipoText1.setDocument(new JTextFieldLimit(20));
		categoriaText1 = new javax.swing.JTextField();
		categoriaText1.setDocument(new JTextFieldLimit(30));
		divisaText1 = new javax.swing.JTextField();
		divisaText1.setDocument(new JTextFieldLimit(20));
		gestoraLabel1 = new javax.swing.JLabel();
		tipoLabel1 = new javax.swing.JLabel();
		categoriaLabel1 = new javax.swing.JLabel();
		divisaLabel1 = new javax.swing.JLabel();
		apComLabel1 = new javax.swing.JLabel();
		cancelComLabel1 = new javax.swing.JLabel();
		canActuaFondoBoton1 = new javax.swing.JButton();
		actuaFondoBoton1 = new javax.swing.JButton();
		cancelComText1 = new javax.swing.JFormattedTextField();
		apComText1 = new javax.swing.JFormattedTextField();
		anadirCartera = new javax.swing.JDialog();
		anadirCartera.setIconImage(mainIcon);
		nomCarteraLabel = new javax.swing.JLabel();
		nomCarteraText = new javax.swing.JTextField();
		nomCarteraText.setDocument(new JTextFieldLimit(40));
		descCarteraLabel = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		descCarteraText = new javax.swing.JTextArea();
		canAnaCarteraBoton = new javax.swing.JButton();
		anaCarteraBoton = new javax.swing.JButton();
		actuaCartera = new javax.swing.JDialog();
		actuaCartera.setIconImage(mainIcon);
		nomCarteraLabel1 = new javax.swing.JLabel();
		nomCarteraText1 = new javax.swing.JTextField();
		nomCarteraText1.setDocument(new JTextFieldLimit(40));
		descCarteraLabel1 = new javax.swing.JLabel();
		jScrollPane5 = new javax.swing.JScrollPane();
		descCarteraText1 = new javax.swing.JTextArea();
		descCarteraText1.setDocument(new JTextFieldLimit(200));
		canAnaCarteraBoton1 = new javax.swing.JButton();
		anaCarteraBoton1 = new javax.swing.JButton();
		anadirVl = new javax.swing.JDialog();
		anadirVl.setIconImage(mainIcon);
		vlIsinLabel = new javax.swing.JLabel();
		vlIsinIdLabel = new javax.swing.JLabel();
		vlFechaLabel = new javax.swing.JLabel();
		vlVlLabel = new javax.swing.JLabel();
		vlVlText = new javax.swing.JFormattedTextField();
		vlCancBoton = new javax.swing.JButton();
		vlAccBoton = new javax.swing.JButton();
		actuaVl = new javax.swing.JDialog();
		actuaVl.setIconImage(mainIcon);
		vlIsinLabel1 = new javax.swing.JLabel();
		vlFechaLabel1 = new javax.swing.JLabel();
		vlVlLabel1 = new javax.swing.JLabel();
		vlVlText1 = new javax.swing.JFormattedTextField();
		vlCancBoton1 = new javax.swing.JButton();
		vlAccBoton1 = new javax.swing.JButton();
		anadirOp = new javax.swing.JDialog();
		anadirOp.setIconImage(mainIcon);
		opCarteraLabel = new javax.swing.JLabel();
		opFechaLabel = new javax.swing.JLabel();
		opOperacionLabel = new javax.swing.JLabel();
		opOperacionText = new javax.swing.JFormattedTextField();
		opCancBoton = new javax.swing.JButton();
		opAccBoton = new javax.swing.JButton();
		fondoDesplegable2 = new javax.swing.JComboBox<>();
		actuaOp = new javax.swing.JDialog();
		actuaOp.setIconImage(mainIcon);
		opIsinLabel1 = new javax.swing.JLabel();
		opCarteraLabel1 = new javax.swing.JLabel();
		opFechaLabel1 = new javax.swing.JLabel();
		opOperacionLabel1 = new javax.swing.JLabel();
		opOperacionText1 = new javax.swing.JFormattedTextField();
		opCancBoton1 = new javax.swing.JButton();
		opAccBoton1 = new javax.swing.JButton();
		anadirFondoCartera = new javax.swing.JDialog();
		anadirFondoCartera.setIconImage(mainIcon);
		carteraLabel = new javax.swing.JLabel();
		fondoDesplegable = new javax.swing.JComboBox<>();
		canAnFondoCartBoton = new javax.swing.JButton();
		aceptAnFondoCartBoton = new javax.swing.JButton();
		borrarFondoCartera = new javax.swing.JDialog();
		borrarFondoCartera.setIconImage(mainIcon);
		carteraLabel1 = new javax.swing.JLabel();
		fondoDesplegable1 = new javax.swing.JComboBox<>();
		canBoFondoCartBoton = new javax.swing.JButton();
		aceptBoFondoCartBoton = new javax.swing.JButton();
		ventanaError = new javax.swing.JOptionPane();
		ventanaConfirmacion = new javax.swing.JDialog();
		ventanaConfirmacion.setIconImage(mainIcon);
		confirmacionLabel = new javax.swing.JLabel();
		aceptarConfirBoton = new javax.swing.JButton();
		cancelarConfirBoton = new javax.swing.JButton();
		selFondoLabel = new javax.swing.JLabel();
		selFondoDespl = new javax.swing.JComboBox<>();
		tablaVls = new javax.swing.JDialog();
		tablaVls.setIconImage(mainIcon);
		jScrollPane3 = new javax.swing.JScrollPane();
		jScrollPane6 = new javax.swing.JScrollPane();
		anadirVlExcel = new javax.swing.JMenuItem();
		exportarExcel = new javax.swing.JMenuItem();

		try {
			Icon pie = new ImageIcon(ImageIO.read(Gui.class.getResourceAsStream("importacion.png")));
			importarFondo = new JMenuItem("Both text and icon", pie);
		} catch (IOException e1) {
		}

		vlFechaLabel2 = new javax.swing.JLabel();
		vlIsinLabel2 = new javax.swing.JLabel();
		ventaBoton1 = new javax.swing.JRadioButton();
		compraBoton1 = new javax.swing.JRadioButton();
		opFechaLabel2 = new javax.swing.JLabel();
		nombreLabel1 = new javax.swing.JLabel();
		nombreText1 = new javax.swing.JTextField();
		nombreText1.setDocument(new JTextFieldLimit(40));
		rentaText = new javax.swing.JFormattedTextField();
		rentaEstimadaLabel = new javax.swing.JLabel();
		calcularBoton = new javax.swing.JButton();
		progresoGrafica = new javax.swing.JProgressBar();
		ColorUIResource colorResource = new ColorUIResource(Color.BLUE.darker());
		UIManager.put("nimbusOrange", colorResource);

		vlTabla = new javax.swing.JTable() {
			@Override
			public Component prepareRenderer(TableCellRenderer renderer, int row, int col) {
				Component comp = super.prepareRenderer(renderer, row, col);

				if (getModel().getValueAt(row, col).getClass() == java.lang.Double.class) {
					Double value = (Double) getModel().getValueAt(row, col);
					if (value < 0) {
						comp.setForeground(Color.red);
					} else {
						comp.setForeground(Color.green);
					}
				} else {
					comp.setForeground(Color.black);
				}
				return comp;
			}
		};

		progresoGraficaListener = new PropertyChangeListener() {
			@Override
			public void propertyChange(final PropertyChangeEvent event) {
				switch (event.getPropertyName()) {
				case "progress":
					progresoGrafica.setIndeterminate(false);
					progresoGrafica.setValue((Integer) event.getNewValue());
					break;
				}
			}
		};
		progressBarListener = new PropertyChangeListener() {
			@Override
			public void propertyChange(final PropertyChangeEvent event) {
				switch (event.getPropertyName()) {
				case "progress":
					progressBar.setIndeterminate(false);
					progressBar.setValue((Integer) event.getNewValue());
					break;
				}
			}
		};
		tablaOps = new javax.swing.JDialog();
		tablaOps.setIconImage(mainIcon);
		jScrollPane4 = new javax.swing.JScrollPane();
		opTabla = new javax.swing.JTable();
		vlMenu = new javax.swing.JPopupMenu();
		actuVl = new javax.swing.JMenuItem();
		borrarVl = new javax.swing.JMenuItem();
		fondoMenu = new javax.swing.JPopupMenu();
		anadVlaFondo = new javax.swing.JMenuItem();
		actualizarFondo = new javax.swing.JMenuItem();
		borrarFondo = new javax.swing.JMenuItem();
		carteraMenu = new javax.swing.JPopupMenu();
		anFondoAcartera = new javax.swing.JMenuItem();
		elFondoCartera = new javax.swing.JMenuItem();
		actualizarCartera = new javax.swing.JMenuItem();
		borrarCartera = new javax.swing.JMenuItem();
		anOperacion = new javax.swing.JMenuItem();
		verOperaciones = new javax.swing.JMenuItem();
		opMenu = new javax.swing.JPopupMenu();
		actuOp = new javax.swing.JMenuItem();
		borrarOp = new javax.swing.JMenuItem();
		buscarText = new javax.swing.JTextField();
		buscarText.setDocument(new JTextFieldLimit(20));
		buscarLabel = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		barraMenu = new javax.swing.JMenuBar();
		jMenu3 = new javax.swing.JMenu();
		try {
			Icon pie = new ImageIcon(ImageIO.read(Gui.class.getResourceAsStream("nuevo.png")));
			botonAnadirFondo = new JMenuItem(pie);
		} catch (IOException e1) {
		}

		try {
			Icon pie = new ImageIcon(ImageIO.read(Gui.class.getResourceAsStream("nuevacarpeta.png")));
			botonAnadirCartera = new JMenuItem(pie);
		} catch (IOException e1) {
		}
		jMenu4 = new javax.swing.JMenu();
		graficasBox = new javax.swing.JComboBox<>();
		nombreLabel = new javax.swing.JLabel();
		nombreText = new javax.swing.JTextField();
		nombreText.setDocument(new JTextFieldLimit(40));
		nombreDesc = new javax.swing.JLabel();
		isinDesc = new javax.swing.JLabel();
		gestoraDesc = new javax.swing.JLabel();
		catDesc = new javax.swing.JLabel();
		divisaDesc = new javax.swing.JLabel();
		apComDesc = new javax.swing.JLabel();
		canComDesc = new javax.swing.JLabel();
		alphaDesc = new javax.swing.JLabel();
		betaDesc = new javax.swing.JLabel();
		varDesc = new javax.swing.JLabel();
		drawDesc = new javax.swing.JLabel();
		descripcionTex = new javax.swing.JEditorPane();
		desdeLabel = new javax.swing.JLabel();
		hastaLabel = new javax.swing.JLabel();
		isinLabel2 = new javax.swing.JLabel();
		principalBoton1 = new javax.swing.JRadioButton();
		principalBoton2 = new javax.swing.JRadioButton();
		principalBoton3 = new javax.swing.JRadioButton();
		progressLabel = new javax.swing.JLabel();
		progressBar = new javax.swing.JProgressBar();
		workers = new ArrayList<>();

		selectorDeFichero = new javax.swing.JFileChooser();
		FileNameExtensionFilter xlsFilter = new FileNameExtensionFilter(" Archivos Excel (*.xls)", "xls");
		selectorDeFichero.addChoosableFileFilter(xlsFilter);
		selectorDeFichero.setFileFilter(xlsFilter);

		///////////////////////////////////////////
		top = new DefaultMutableTreeNode("Carteras");
		top2 = new DefaultMutableTreeNode("Fondos");

		arbolFondos = new javax.swing.JTree(top);

		try {

			DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) arbolFondos.getCellRenderer();
			Icon closedIcon = new ImageIcon(ImageIO.read(Gui.class.getResourceAsStream("portclosed.png")));
			Icon openIcon = new ImageIcon(ImageIO.read(Gui.class.getResourceAsStream("portopen.png")));
			Icon leafIcon = new ImageIcon(ImageIO.read(Gui.class.getResourceAsStream("fondo.png")));
			renderer.setClosedIcon(closedIcon);
			renderer.setOpenIcon(openIcon);
			renderer.setLeafIcon(leafIcon);

		} catch (IOException e1) {
		}

		arbolFondos2 = new javax.swing.JTree(top2);

		try {

			DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) arbolFondos2.getCellRenderer();
			Icon closedIcon = new ImageIcon(ImageIO.read(Gui.class.getResourceAsStream("portclosed.png")));
			Icon openIcon = new ImageIcon(ImageIO.read(Gui.class.getResourceAsStream("portopen.png")));
			Icon leafIcon = new ImageIcon(ImageIO.read(Gui.class.getResourceAsStream("fondo.png")));
			renderer.setClosedIcon(closedIcon);
			renderer.setOpenIcon(openIcon);
			renderer.setLeafIcon(leafIcon);
		} catch (IOException e1) {
		}

		JPanel content = new JPanel();

		content.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.anchor = GridBagConstraints.NORTHWEST;
		c.fill = GridBagConstraints.HORIZONTAL;

		c.weightx = 1;
		c.weighty = 0;
		c.gridx = 0;
		c.gridy = 0;

		content.add(arbolFondos, c);

		c.weightx = 1;
		c.weighty = 1;
		c.gridx = 0;
		c.gridy = 1;

		content.add(arbolFondos2, c);

		content.setBackground(Color.WHITE);

		progressLabel.setText("Actualizando Modelo:");

		NodesWorker createNodes = new NodesWorker(fundService, arbolFondos, arbolFondos2, top, top2, progressLabel);
		createNodes.addPropertyChangeListener(progressBarListener);
		createNodes.execute();

		model1 = new UtilDateModel();
		model2 = new UtilDateModel();
		model3 = new UtilDateModel();

		model1.setSelected(true);
		model2.setSelected(true);
		model3.setSelected(true);

		Properties p = new Properties();
		p.put("text.today", "Hoy");
		p.put("text.month", "Mes");
		p.put("text.year", "Año");
		JDatePanelImpl datePanel1 = new JDatePanelImpl(model1, p);
		JDatePanelImpl datePanel2 = new JDatePanelImpl(model2, p);
		JDatePanelImpl datePanel3 = new JDatePanelImpl(model3, p);

		desdeDate = new JDatePickerImpl(datePanel1, new DateLabelFormatter());
		hastaDate = new JDatePickerImpl(datePanel2, new DateLabelFormatter());
		opDate = new JDatePickerImpl(datePanel3, new DateLabelFormatter());

		///////////////////////////////////////////

		anadirFondo.setTitle("Añadir Fondo");
		anadirFondo.setAlwaysOnTop(false);
		anadirFondo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		anadirFondo.setLocation(new java.awt.Point(0, 0));
		anadirFondo.setLocationByPlatform(true);
		anadirFondo.setModal(true);
		anadirFondo.setResizable(false);
		anadirFondo.setSize(new java.awt.Dimension(415, 370));

		isinLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		isinLabel.setText("ISIN:");

		gestoraLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		gestoraLabel.setText("Gestora:");

		tipoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		tipoLabel.setText("Tipo:");

		categoriaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		categoriaLabel.setText("Categoría:");

		divisaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		divisaLabel.setText("Divisa:");

		apComLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		apComLabel.setText("Comision de apertura:");

		cancelComLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		cancelComLabel.setText("Comisión de cancelación:");

		canAnaFondoBoton.setText("Cancelar");
		canAnaFondoBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				canAnaFondoBotonActionPerformed(evt);
			}
		});

		anadFondoBoton.setText("Aceptar");
		anadFondoBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				anadFondoBotonActionPerformed(evt);
			}
		});

		cancelComText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
		cancelComText.setValue(new Double(0));

		apComText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
		apComText.setValue(new Double(0));

		nombreLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		nombreLabel.setText("Nombre:");

		javax.swing.GroupLayout anadirFondoLayout = new javax.swing.GroupLayout(anadirFondo.getContentPane());
		anadirFondo.getContentPane().setLayout(anadirFondoLayout);
		anadirFondoLayout
				.setHorizontalGroup(
						anadirFondoLayout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(
										anadirFondoLayout.createSequentialGroup().addGroup(anadirFondoLayout
												.createParallelGroup(
														javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
														anadirFondoLayout.createSequentialGroup().addGap(202, 202, 202)
																.addComponent(canAnaFondoBoton).addGap(18, 18, 18)
																.addComponent(anadFondoBoton))
												.addGroup(anadirFondoLayout.createSequentialGroup().addContainerGap()
														.addGroup(anadirFondoLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addGroup(anadirFondoLayout.createSequentialGroup()
																		.addGroup(anadirFondoLayout
																				.createParallelGroup(
																						javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(gestoraLabel)
																				.addComponent(tipoLabel)
																				.addComponent(categoriaLabel)
																				.addComponent(divisaLabel)
																				.addComponent(cancelComLabel)
																				.addComponent(apComLabel))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addGroup(anadirFondoLayout
																				.createParallelGroup(
																						javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(divisaText,
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						122,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(cancelComText,
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						139,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(categoriaText,
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						122,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(tipoText,
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						122,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(gestoraText,
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						122,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(apComText,
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						139,
																						javax.swing.GroupLayout.PREFERRED_SIZE)))
																.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
																		anadirFondoLayout.createSequentialGroup()
																				.addGroup(anadirFondoLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(nombreLabel)
																						.addComponent(isinLabel))
																				.addPreferredGap(
																						javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						Short.MAX_VALUE)
																				.addGroup(anadirFondoLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(nombreText,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(isinText,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								122,
																								javax.swing.GroupLayout.PREFERRED_SIZE))))))
												.addContainerGap()));

		anadirFondoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] { apComLabel,
				cancelComLabel, categoriaLabel, divisaLabel, gestoraLabel, isinLabel, nombreLabel, tipoLabel });

		anadirFondoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] { cancelComText,
				categoriaText, divisaText, gestoraText, isinText, nombreText, tipoText });

		anadirFondoLayout.setVerticalGroup(anadirFondoLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(anadirFondoLayout.createSequentialGroup().addGap(23, 23, 23)
						.addGroup(anadirFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(isinLabel).addComponent(isinText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(nombreText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(nombreLabel))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(gestoraLabel).addComponent(gestoraText,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(tipoText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(tipoLabel))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(categoriaText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(categoriaLabel))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(divisaText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(divisaLabel))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(apComLabel).addComponent(apComText,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(cancelComLabel).addComponent(cancelComText,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
						.addGroup(anadirFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(anadFondoBoton).addComponent(canAnaFondoBoton))
						.addContainerGap()));

		anadirFondoLayout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { isinLabel, isinText, nombreLabel, nombreText });

		anadirFondoLayout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { apComLabel, cancelComLabel, categoriaLabel, categoriaText, divisaLabel,
						divisaText, gestoraLabel, gestoraText, tipoLabel, tipoText });

		actuaFondo.setTitle("Actualizar Fondo");
		actuaFondo.setAlwaysOnTop(false);
		actuaFondo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		actuaFondo.setLocation(new java.awt.Point(0, 0));
		actuaFondo.setLocationByPlatform(true);
		actuaFondo.setModal(true);
		actuaFondo.setResizable(false);
		actuaFondo.setSize(new java.awt.Dimension(380, 400));

		isinLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		isinLabel1.setText("ISIN:");

		gestoraLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		gestoraLabel1.setText("Gestora:");

		tipoLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		tipoLabel1.setText("Tipo:");

		categoriaLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		categoriaLabel1.setText("Categoría:");

		divisaLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		divisaLabel1.setText("Divisa:");

		apComLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		apComLabel1.setText("Comision de apertura (%):");

		cancelComLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		cancelComLabel1.setText("Comisión de cancelación (%):");

		canActuaFondoBoton1.setText("Cancelar");
		canActuaFondoBoton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				canActuaFondoBoton1ActionPerformed(evt);
			}
		});

		actuaFondoBoton1.setText("Aceptar");
		actuaFondoBoton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				actuaFondoBoton1ActionPerformed(evt);
			}
		});

		isinLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		isinLabel2.setText("");

		nombreLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		nombreLabel1.setText("Nombre:");

		cancelComText1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
		cancelComText1.setValue(new Double(0));

		apComText1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
		apComText1.setValue(new Double(0));

		javax.swing.GroupLayout actuaFondoLayout = new javax.swing.GroupLayout(actuaFondo.getContentPane());
		actuaFondo.getContentPane().setLayout(actuaFondoLayout);
		actuaFondoLayout
				.setHorizontalGroup(
						actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(actuaFondoLayout
										.createSequentialGroup().addContainerGap()
										.addGroup(actuaFondoLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addGroup(actuaFondoLayout.createSequentialGroup()
														.addComponent(canActuaFondoBoton1).addGap(18, 18, 18)
														.addComponent(actuaFondoBoton1))
												.addGroup(actuaFondoLayout.createSequentialGroup()
														.addGroup(actuaFondoLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING)
																.addGroup(actuaFondoLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(tipoLabel1)
																		.addComponent(categoriaLabel1)
																		.addComponent(divisaLabel1)
																		.addComponent(cancelComLabel1)
																		.addComponent(apComLabel1))
																.addComponent(isinLabel1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		128, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addComponent(nombreLabel1)
																.addComponent(gestoraLabel1,
																		javax.swing.GroupLayout.Alignment.LEADING))
														.addGap(18, 18, 18)
														.addGroup(actuaFondoLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(
																		gestoraText1,
																		javax.swing.GroupLayout.PREFERRED_SIZE, 122,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGroup(actuaFondoLayout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(divisaText1,
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				122,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(cancelComText1,
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				139,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(categoriaText1,
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				122,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(tipoText1,
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				122,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(apComText1,
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				139,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
																.addComponent(isinLabel2,
																		javax.swing.GroupLayout.Alignment.TRAILING)
																.addComponent(nombreText1,
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		javax.swing.GroupLayout.PREFERRED_SIZE, 148,
																		javax.swing.GroupLayout.PREFERRED_SIZE))))
										.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		actuaFondoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { apComLabel1, apComText1, cancelComLabel1, cancelComText1, categoriaLabel1,
						categoriaText1, divisaLabel1, divisaText1, gestoraLabel1, gestoraText1, isinLabel1, isinLabel2,
						nombreLabel1, nombreText1, tipoLabel1, tipoText1 });

		actuaFondoLayout.setVerticalGroup(actuaFondoLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(actuaFondoLayout.createSequentialGroup().addGap(26, 26, 26)
						.addGroup(actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(isinLabel1).addComponent(isinLabel2))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(nombreText1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(nombreLabel1))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(gestoraLabel1).addComponent(gestoraText1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(tipoText1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(tipoLabel1))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(categoriaText1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(categoriaLabel1))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(divisaText1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(divisaLabel1))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(apComLabel1).addComponent(apComText1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(cancelComLabel1).addComponent(cancelComText1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(actuaFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(actuaFondoBoton1).addComponent(canActuaFondoBoton1))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		actuaFondoLayout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { apComLabel1, apComText1, cancelComLabel1, cancelComText1, categoriaLabel1,
						categoriaText1, divisaLabel1, divisaText1, gestoraLabel1, gestoraText1, isinLabel1, isinLabel2,
						nombreLabel1, nombreText1, tipoLabel1, tipoText1 });

		anadirCartera.setTitle("Añadir Cartera");
		anadirCartera.setAlwaysOnTop(false);
		anadirCartera.setModal(true);
		anadirCartera.setResizable(false);
		anadirCartera.setSize(new java.awt.Dimension(380, 280));

		nomCarteraLabel.setText("Nombre de la cartera:");

		descCarteraLabel.setText("Descripcción:");

		descCarteraText.setColumns(20);
		descCarteraText.setRows(5);
		jScrollPane1.setViewportView(descCarteraText);

		canAnaCarteraBoton.setText("Cancelar");
		canAnaCarteraBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				canAnaCarteraBotonActionPerformed(evt);
			}
		});

		anaCarteraBoton.setText("Aceptar");
		anaCarteraBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				anaCarteraBotonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout anadirCarteraLayout = new javax.swing.GroupLayout(anadirCartera.getContentPane());
		anadirCartera.getContentPane().setLayout(anadirCarteraLayout);
		anadirCarteraLayout.setHorizontalGroup(
				anadirCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
						anadirCarteraLayout
								.createSequentialGroup().addContainerGap()
								.addGroup(anadirCarteraLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, anadirCarteraLayout
												.createSequentialGroup()
												.addGroup(anadirCarteraLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(descCarteraLabel).addComponent(nomCarteraLabel))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29,
														Short.MAX_VALUE)
												.addGroup(anadirCarteraLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(jScrollPane1).addComponent(nomCarteraText)))
										.addGroup(anadirCarteraLayout.createSequentialGroup()
												.addGap(0, 0, Short.MAX_VALUE).addComponent(canAnaCarteraBoton)
												.addGap(18, 18, 18).addComponent(anaCarteraBoton)))
								.addContainerGap()));

		anadirCarteraLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { anaCarteraBoton, canAnaCarteraBoton });

		anadirCarteraLayout.setVerticalGroup(anadirCarteraLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(anadirCarteraLayout.createSequentialGroup().addGap(38, 38, 38)
						.addGroup(anadirCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(nomCarteraLabel).addComponent(nomCarteraText,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(anadirCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(descCarteraLabel).addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
						.addGroup(anadirCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(canAnaCarteraBoton).addComponent(anaCarteraBoton))
						.addContainerGap()));

		anadirCarteraLayout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { nomCarteraLabel, nomCarteraText });

		actuaCartera.setTitle("Actualizar Cartera");
		actuaCartera.setAlwaysOnTop(false);
		actuaCartera.setModal(true);
		actuaCartera.setResizable(false);
		actuaCartera.setSize(new java.awt.Dimension(330, 280));

		nomCarteraLabel1.setText("Nombre de la cartera:");

		descCarteraLabel1.setText("Descripcción:");

		descCarteraText1.setColumns(20);
		descCarteraText1.setRows(5);
		jScrollPane5.setViewportView(descCarteraText1);

		canAnaCarteraBoton1.setText("Cancelar");
		canAnaCarteraBoton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				canAnaCarteraBoton1ActionPerformed(evt);
			}
		});

		anaCarteraBoton1.setText("Aceptar");
		anaCarteraBoton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				anaCarteraBoton1ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout actuaCarteraLayout = new javax.swing.GroupLayout(actuaCartera.getContentPane());
		actuaCartera.getContentPane().setLayout(actuaCarteraLayout);
		actuaCarteraLayout
				.setHorizontalGroup(actuaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(actuaCarteraLayout
								.createSequentialGroup().addContainerGap()
								.addGroup(actuaCarteraLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
												actuaCarteraLayout.createSequentialGroup()
														.addComponent(nomCarteraLabel1).addGap(31, 31, 31).addComponent(
																nomCarteraText1, javax.swing.GroupLayout.PREFERRED_SIZE,
																164, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actuaCarteraLayout
												.createSequentialGroup().addComponent(canAnaCarteraBoton1)
												.addGap(18, 18, 18).addComponent(anaCarteraBoton1))
										.addGroup(actuaCarteraLayout.createSequentialGroup()
												.addComponent(descCarteraLabel1)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 227,
														javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap()));
		actuaCarteraLayout.setVerticalGroup(actuaCarteraLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(actuaCarteraLayout.createSequentialGroup().addGap(38, 38, 38)
						.addGroup(actuaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(nomCarteraLabel1).addComponent(nomCarteraText1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(actuaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(actuaCarteraLayout.createSequentialGroup()
										.addComponent(descCarteraLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addGap(0, 0, Short.MAX_VALUE))
								.addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
						.addGap(18, 18, 18)
						.addGroup(actuaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(canAnaCarteraBoton1).addComponent(anaCarteraBoton1))
						.addContainerGap()));

		actuaCarteraLayout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { descCarteraLabel1, nomCarteraLabel1, nomCarteraText1 });

		anadirVl.setTitle("Añadir VL");
		anadirVl.setAlwaysOnTop(false);
		anadirVl.setModal(true);
		anadirVl.setSize(new java.awt.Dimension(290, 220));

		vlIsinLabel.setText("ISIN:");

		vlIsinIdLabel.setText("ISIN ID");

		vlFechaLabel.setText("Fecha:");

		vlVlLabel.setText("Valor liquidativo:");

		vlVlText.setFormatterFactory(
				new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
		vlVlText.setValue(new Integer(0));

		vlCancBoton.setText("Cancelar");
		vlCancBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				vlCancBotonActionPerformed(evt);
			}
		});

		vlAccBoton.setText("Aceptar");
		vlAccBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				vlAccBotonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout anadirVlLayout = new javax.swing.GroupLayout(anadirVl.getContentPane());
		anadirVl.getContentPane().setLayout(anadirVlLayout);
		anadirVlLayout.setHorizontalGroup(anadirVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(anadirVlLayout.createSequentialGroup()
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(anadirVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addGroup(anadirVlLayout.createSequentialGroup()
										.addComponent(vlCancBoton).addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(vlAccBoton))
								.addGroup(anadirVlLayout.createSequentialGroup()
										.addGroup(anadirVlLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addGroup(anadirVlLayout.createSequentialGroup().addGroup(anadirVlLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(vlVlLabel).addComponent(vlFechaLabel,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
														.addGap(37, 37, 37))
												.addGroup(javax.swing.GroupLayout.Alignment.LEADING,
														anadirVlLayout.createSequentialGroup().addComponent(vlIsinLabel)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
										.addGroup(anadirVlLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(vlIsinIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE,
														110, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(vlVlText, javax.swing.GroupLayout.PREFERRED_SIZE, 110,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(opDate, javax.swing.GroupLayout.Alignment.LEADING,
														javax.swing.GroupLayout.PREFERRED_SIZE, 110,
														javax.swing.GroupLayout.DEFAULT_SIZE))))
						.addGap(32, 32, 32)));

		anadirVlLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { opDate, vlFechaLabel, vlIsinIdLabel, vlIsinLabel, vlVlLabel, vlVlText });

		anadirVlLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { vlAccBoton, vlCancBoton });

		anadirVlLayout.setVerticalGroup(anadirVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(anadirVlLayout.createSequentialGroup().addGap(25, 25, 25)
						.addGroup(anadirVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(vlIsinLabel).addComponent(vlIsinIdLabel))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(vlFechaLabel).addComponent(opDate, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(anadirVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(vlVlLabel).addComponent(vlVlText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(anadirVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(vlCancBoton).addComponent(vlAccBoton))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		anadirVlLayout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { opDate, vlFechaLabel, vlIsinIdLabel, vlIsinLabel, vlVlLabel, vlVlText });

		anadirVlLayout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { vlAccBoton, vlCancBoton });

		actuaVl.setTitle("Actualizar VL");
		actuaVl.setAlwaysOnTop(false);
		actuaVl.setModal(true);
		actuaVl.setResizable(false);
		actuaVl.setSize(new java.awt.Dimension(250, 185));

		vlIsinLabel1.setText("ISIN:");

		vlFechaLabel1.setText("Fecha:");

		vlVlLabel1.setText("Valor liquidativo:");

		vlVlText1.setFormatterFactory(
				new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
		vlVlText1.setValue(new Integer(0));

		vlCancBoton1.setText("Cancelar");
		vlCancBoton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				vlCancBoton1ActionPerformed(evt);
			}
		});

		vlAccBoton1.setText("Aceptar");
		vlAccBoton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				vlAccBoton1ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout actuaVlLayout = new javax.swing.GroupLayout(actuaVl.getContentPane());
		actuaVl.getContentPane().setLayout(actuaVlLayout);
		actuaVlLayout.setHorizontalGroup(actuaVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actuaVlLayout.createSequentialGroup()
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(actuaVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addGroup(actuaVlLayout.createSequentialGroup().addComponent(vlCancBoton1)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(vlAccBoton1))
								.addGroup(actuaVlLayout.createSequentialGroup()
										.addGroup(actuaVlLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(vlVlLabel1).addComponent(vlIsinLabel1)
												.addComponent(vlFechaLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79,
														javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(18, 18, 18)
										.addGroup(actuaVlLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addGroup(actuaVlLayout.createSequentialGroup().addGroup(actuaVlLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(vlFechaLabel2).addComponent(vlIsinLabel2))
														.addGap(1, 1, 1))
												.addComponent(vlVlText1, javax.swing.GroupLayout.PREFERRED_SIZE, 100,
														javax.swing.GroupLayout.PREFERRED_SIZE))))
						.addContainerGap()));

		actuaVlLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { vlAccBoton1, vlCancBoton1 });

		actuaVlLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { vlFechaLabel1, vlFechaLabel2, vlIsinLabel1, vlIsinLabel2, vlVlText1 });

		actuaVlLayout.setVerticalGroup(actuaVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(actuaVlLayout.createSequentialGroup().addContainerGap()
						.addGroup(actuaVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(vlIsinLabel1).addComponent(vlIsinLabel2))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(vlFechaLabel1).addComponent(vlFechaLabel2))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(vlVlLabel1).addComponent(vlVlText1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(actuaVlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(vlCancBoton1).addComponent(vlAccBoton1))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		actuaVlLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] { vlFechaLabel1,
				vlFechaLabel2, vlIsinLabel1, vlIsinLabel2, vlVlLabel1, vlVlText1 });

		anadirOp.setTitle("Añadir Operación");
		anadirOp.setAlwaysOnTop(false);
		anadirOp.setModal(true);
		anadirOp.setSize(new java.awt.Dimension(300, 225));
		anadirOp.setResizable(false);

		opCarteraLabel.setText("Nomb Cart");

		opFechaLabel.setText("Fecha:");

		opOperacionLabel.setText("Participaciones:");

		opOperacionText.setValue(new Integer(0));

		opCancBoton.setText("Cancelar");
		opCancBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				opCancBotonActionPerformed(evt);
			}
		});

		opAccBoton.setText("Aceptar");
		opAccBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				opAccBotonActionPerformed(evt);
			}
		});

		fondoDesplegable2.setEditable(false);
		fondoDesplegable2.setModel(new javax.swing.DefaultComboBoxModel<>());

		buttonGroup1.add(ventaBoton);
		ventaBoton.setText("Venta");

		buttonGroup1.add(compraBoton);
		compraBoton.setText("Compra");

		javax.swing.GroupLayout anadirOpLayout = new javax.swing.GroupLayout(anadirOp.getContentPane());
		anadirOp.getContentPane().setLayout(anadirOpLayout);
		anadirOpLayout.setHorizontalGroup(anadirOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						anadirOpLayout.createSequentialGroup().addContainerGap()
								.addGroup(anadirOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addGroup(anadirOpLayout.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE)
												.addComponent(opCancBoton)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(opAccBoton))
										.addGroup(anadirOpLayout.createSequentialGroup().addGroup(anadirOpLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(opCarteraLabel)
												.addComponent(
														opFechaLabel, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(opOperacionLabel))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addGroup(anadirOpLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(anadirOpLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addGroup(anadirOpLayout.createSequentialGroup()
																		.addComponent(compraBoton,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(ventaBoton,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				59,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
																.addComponent(opOperacionText,
																		javax.swing.GroupLayout.Alignment.TRAILING)
																.addComponent(opDate,
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		javax.swing.GroupLayout.PREFERRED_SIZE, 126,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
														.addComponent(fondoDesplegable2,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.PREFERRED_SIZE, 126,
																javax.swing.GroupLayout.PREFERRED_SIZE))))
								.addContainerGap()));

		anadirOpLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { compraBoton, ventaBoton });

		anadirOpLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] { fondoDesplegable2,
				opCarteraLabel, opDate, opFechaLabel, opOperacionLabel, opOperacionText });

		anadirOpLayout.setVerticalGroup(anadirOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(anadirOpLayout.createSequentialGroup().addContainerGap()
						.addGroup(anadirOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(opCarteraLabel).addComponent(fondoDesplegable2,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(opFechaLabel).addComponent(opDate, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(anadirOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(opOperacionLabel).addComponent(opOperacionText,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(anadirOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(ventaBoton).addComponent(compraBoton))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
						.addGroup(anadirOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(opCancBoton).addComponent(opAccBoton))
						.addContainerGap()));

		anadirOpLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] { fondoDesplegable2,
				opCarteraLabel, opDate, opFechaLabel, opOperacionLabel, opOperacionText });

		actuaOp.setTitle("Actualizar Operación");
		actuaOp.setAlwaysOnTop(false);
		actuaOp.setModal(true);
		actuaOp.setSize(new java.awt.Dimension(320, 240));

		opIsinLabel1.setText("ISIN ID");

		opCarteraLabel1.setText("Nomb Cart");

		opFechaLabel1.setText("Fecha:");

		opOperacionLabel1.setText("Participaciones:");

		opOperacionText1.setValue(new Integer(0));

		opCancBoton1.setText("Cancelar");
		opCancBoton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				opCancBoton1ActionPerformed(evt);
			}
		});

		opAccBoton1.setText("Aceptar");
		opAccBoton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				opAccBoton1ActionPerformed(evt);
			}
		});

		buttonGroup1.add(ventaBoton1);
		ventaBoton1.setText("Venta");

		buttonGroup1.add(compraBoton1);
		compraBoton1.setText("Compra");

		opFechaLabel2.setText("jLabel1");

		javax.swing.GroupLayout actuaOpLayout = new javax.swing.GroupLayout(actuaOp.getContentPane());
		actuaOp.getContentPane().setLayout(actuaOpLayout);
		actuaOpLayout.setHorizontalGroup(actuaOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						actuaOpLayout.createSequentialGroup().addContainerGap()
								.addGroup(actuaOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addGroup(actuaOpLayout.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE)
												.addComponent(opCancBoton1)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(opAccBoton1))
										.addGroup(actuaOpLayout.createSequentialGroup().addGroup(actuaOpLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(opCarteraLabel1)
												.addComponent(
														opFechaLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(opOperacionLabel1))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addGroup(actuaOpLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(actuaOpLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addGroup(actuaOpLayout.createSequentialGroup()
																		.addComponent(compraBoton1,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(ventaBoton1,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				59,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
																.addComponent(opOperacionText1,
																		javax.swing.GroupLayout.Alignment.TRAILING)
																.addComponent(opFechaLabel2,
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		javax.swing.GroupLayout.PREFERRED_SIZE, 126,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
														.addComponent(opIsinLabel1,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.PREFERRED_SIZE, 126,
																javax.swing.GroupLayout.PREFERRED_SIZE))))
								.addContainerGap()));

		actuaOpLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { compraBoton1, ventaBoton1 });

		actuaOpLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] { opIsinLabel1,
				opCarteraLabel1, opFechaLabel2, opFechaLabel1, opOperacionLabel1, opOperacionText1 });

		actuaOpLayout.setVerticalGroup(actuaOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(actuaOpLayout.createSequentialGroup().addContainerGap()
						.addGroup(actuaOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(opCarteraLabel1).addComponent(opIsinLabel1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(opFechaLabel1).addComponent(opFechaLabel2,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(actuaOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(opOperacionLabel1).addComponent(opOperacionText1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(actuaOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(ventaBoton1).addComponent(compraBoton1))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
						.addGroup(actuaOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(opCancBoton1).addComponent(opAccBoton1))
						.addContainerGap()));

		actuaOpLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] { opIsinLabel1,
				opCarteraLabel1, opFechaLabel2, opFechaLabel1, opOperacionLabel1, opOperacionText1 });

		anadirFondoCartera.setTitle("Añadir Fondo");
		anadirFondoCartera.setModal(true);
		anadirFondoCartera.setResizable(false);
		anadirFondoCartera.setSize(new java.awt.Dimension(250, 135));

		carteraLabel.setText("");

		fondoDesplegable.setEditable(false);
		fondoDesplegable.setModel(new javax.swing.DefaultComboBoxModel<>());

		canAnFondoCartBoton.setText("Cancelar");
		canAnFondoCartBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				canAnFondoCartBotonActionPerformed(evt);
			}
		});

		aceptAnFondoCartBoton.setText("Aceptar");
		aceptAnFondoCartBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				aceptAnFondoCartBotonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout anadirFondoCarteraLayout = new javax.swing.GroupLayout(
				anadirFondoCartera.getContentPane());
		anadirFondoCartera.getContentPane().setLayout(anadirFondoCarteraLayout);
		anadirFondoCarteraLayout.setHorizontalGroup(anadirFondoCarteraLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(anadirFondoCarteraLayout.createSequentialGroup().addContainerGap()
						.addGroup(anadirFondoCarteraLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(anadirFondoCarteraLayout.createSequentialGroup().addComponent(carteraLabel)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(fondoDesplegable, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										anadirFondoCarteraLayout.createSequentialGroup().addGap(0, 28, Short.MAX_VALUE)
												.addComponent(canAnFondoCartBoton)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(aceptAnFondoCartBoton)))
						.addContainerGap()));
		anadirFondoCarteraLayout.setVerticalGroup(anadirFondoCarteraLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(anadirFondoCarteraLayout.createSequentialGroup().addGap(23, 23, 23)
						.addGroup(anadirFondoCarteraLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(carteraLabel).addComponent(fondoDesplegable,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(
								anadirFondoCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(aceptAnFondoCartBoton).addComponent(canAnFondoCartBoton))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		anadirFondoCarteraLayout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { carteraLabel, fondoDesplegable });

		borrarFondoCartera.setTitle("Eliminar Fondo");
		borrarFondoCartera.setModal(true);
		borrarFondoCartera.setResizable(false);
		borrarFondoCartera.setSize(new java.awt.Dimension(250, 135));

		carteraLabel1.setText("Cartera:");

		fondoDesplegable1.setEditable(false);
		fondoDesplegable1.setModel(new javax.swing.DefaultComboBoxModel<>());

		canBoFondoCartBoton.setText("Cancelar");
		canBoFondoCartBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				canBoFondoCartBotonActionPerformed(evt);
			}
		});

		aceptBoFondoCartBoton.setText("Aceptar");
		aceptBoFondoCartBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				aceptBoFondoCartBotonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout borrarFondoCarteraLayout = new javax.swing.GroupLayout(
				borrarFondoCartera.getContentPane());
		borrarFondoCartera.getContentPane().setLayout(borrarFondoCarteraLayout);
		borrarFondoCarteraLayout.setHorizontalGroup(
				borrarFondoCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(borrarFondoCarteraLayout.createSequentialGroup().addContainerGap()
								.addGroup(borrarFondoCarteraLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addGroup(borrarFondoCarteraLayout
												.createSequentialGroup().addComponent(carteraLabel1).addGap(27, 27, 27)
												.addComponent(fondoDesplegable1, javax.swing.GroupLayout.PREFERRED_SIZE,
														120, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(borrarFondoCarteraLayout.createSequentialGroup()
												.addComponent(canBoFondoCartBoton)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(aceptBoFondoCartBoton)))
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		borrarFondoCarteraLayout.setVerticalGroup(borrarFondoCarteraLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, borrarFondoCarteraLayout.createSequentialGroup()
						.addContainerGap(20, Short.MAX_VALUE)
						.addGroup(borrarFondoCarteraLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(carteraLabel1).addComponent(fondoDesplegable1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(
								borrarFondoCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(canBoFondoCartBoton).addComponent(aceptBoFondoCartBoton))
						.addContainerGap()));

		ventanaConfirmacion.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		ventanaConfirmacion.setTitle("Confirmación");
		ventanaConfirmacion.setModal(true);
		ventanaConfirmacion.setResizable(false);

		confirmacionLabel.setText("Pregunta de confirmación");

		aceptarConfirBoton.setText("Cancelar");
		aceptarConfirBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				aceptarConfirBotonActionPerformed(evt);
			}
		});

		cancelarConfirBoton.setText("Aceptar");
		cancelarConfirBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelarConfirBotonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout ventanaConfirmacionLayout = new javax.swing.GroupLayout(
				ventanaConfirmacion.getContentPane());
		ventanaConfirmacion.getContentPane().setLayout(ventanaConfirmacionLayout);
		ventanaConfirmacionLayout.setHorizontalGroup(ventanaConfirmacionLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(ventanaConfirmacionLayout.createSequentialGroup().addGap(53, 53, 53)
						.addGroup(ventanaConfirmacionLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(confirmacionLabel, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(ventanaConfirmacionLayout.createSequentialGroup()
										.addComponent(aceptarConfirBoton)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(cancelarConfirBoton)))
						.addContainerGap(54, Short.MAX_VALUE)));
		ventanaConfirmacionLayout.setVerticalGroup(
				ventanaConfirmacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(ventanaConfirmacionLayout.createSequentialGroup().addGap(43, 43, 43)
								.addComponent(confirmacionLabel).addGap(53, 53, 53)
								.addGroup(ventanaConfirmacionLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(aceptarConfirBoton).addComponent(cancelarConfirBoton))
								.addContainerGap(53, Short.MAX_VALUE)));

		selFondoLabel.setText("Seleccionar fondo:");

		selFondoDespl.setModel(new javax.swing.DefaultComboBoxModel<>());
		selFondoDespl.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				selFondoDesplActionPerformed(evt);
			}
		});

		tablaVls.setTitle("Valores Liquidativos");
		tablaVls.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		tablaVls.setSize(new java.awt.Dimension(700, 450));
		tablaVls.setModal(true);
		tablaVls.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				tablaVlsWindowClosing(evt);
			}
		});

		vlTabla.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

		}, new String[] { "ISIN", "Fecha", "Valor Liquidativo", "Variación (%)" }) {

			@Override
			public boolean isCellEditable(int row, int column) {
				// all cells false
				return false;
			}

			Class[] types = new Class[] { java.lang.String.class, FundVl.class, java.lang.Double.class,
					java.lang.Double.class };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}
		});

		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
		vlTabla.setDefaultRenderer(Object.class, centerRenderer);

		JTableHeader header = vlTabla.getTableHeader();
		header.setDefaultRenderer(new HeaderRenderer(vlTabla));

		vlTabla.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				vlTablaMousePressed(evt);
			}

			public void mouseReleased(java.awt.event.MouseEvent evt) {
				vlTablaMouseReleased(evt);
			}
		});
		jScrollPane3.setViewportView(vlTabla);

		javax.swing.GroupLayout tablaVlsLayout = new javax.swing.GroupLayout(tablaVls.getContentPane());
		tablaVls.getContentPane().setLayout(tablaVlsLayout);
		tablaVlsLayout.setHorizontalGroup(tablaVlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(tablaVlsLayout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
						.addContainerGap()));
		tablaVlsLayout.setVerticalGroup(tablaVlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(tablaVlsLayout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
						.addContainerGap()));

		tablaOps.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		tablaOps.setTitle("Operaciones");
		tablaOps.setModal(true);
		tablaOps.setSize(new java.awt.Dimension(700, 450));
		tablaOps.setLocationRelativeTo(this);
		tablaOps.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				tablaOpsWindowClosing(evt);
			}
		});

		opTabla.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

		}, new String[] { "Fecha", "Operación", "Cantidad", "Precio", "Particip Finales" }) {

			@Override
			public boolean isCellEditable(int row, int column) {
				// all cells false
				return false;
			}

			Class[] types = new Class[] { FundPort.class, java.lang.String.class, java.lang.Integer.class,
					java.lang.Double.class, java.lang.Integer.class };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}
		});

		centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
		opTabla.setDefaultRenderer(Object.class, centerRenderer);

		header = opTabla.getTableHeader();
		header.setDefaultRenderer(new HeaderRenderer(opTabla));

		opTabla.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(java.awt.event.MouseEvent evt) {
				opTablaMouseReleased(evt);
			}
		});

		jScrollPane4.setViewportView(opTabla);

		selFondoLabel.setText("Seleccionar fondo:");

		javax.swing.GroupLayout tablaOpsLayout = new javax.swing.GroupLayout(tablaOps.getContentPane());
		tablaOps.getContentPane().setLayout(tablaOpsLayout);
		tablaOpsLayout.setHorizontalGroup(tablaOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(tablaOpsLayout.createSequentialGroup().addContainerGap()
						.addGroup(tablaOpsLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tablaOpsLayout
										.createSequentialGroup().addComponent(selFondoLabel)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(selFondoDespl, javax.swing.GroupLayout.PREFERRED_SIZE, 128,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(0, 0, Short.MAX_VALUE))
								.addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING,
										javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE))
						.addContainerGap()));
		tablaOpsLayout.setVerticalGroup(tablaOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablaOpsLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(tablaOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(selFondoLabel).addComponent(selFondoDespl,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
						.addContainerGap()));

		actuVl.setText("Actualizar");
		actuVl.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				actuVlActionPerformed(evt);
			}
		});
		vlMenu.add(actuVl);

		borrarVl.setText("Borrar");
		borrarVl.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				borrarVlActionPerformed(evt);
			}
		});
		vlMenu.add(borrarVl);

		anadVlaFondo.setText("Añadir VL");
		anadVlaFondo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				anadVlaFondoActionPerformed(evt);
			}
		});
		fondoMenu.add(anadVlaFondo);

		actualizarFondo.setText("Actualizar");
		actualizarFondo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				actualizarFondoActionPerformed(evt);
			}
		});
		fondoMenu.add(actualizarFondo);

		borrarFondo.setText("Borrar");
		borrarFondo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				borrarFondoActionPerformed(evt);
			}
		});
		fondoMenu.add(borrarFondo);

		verVl.setText("Ver Vls");
		verVl.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				verVlActionPerformed(evt);
			}
		});
		fondoMenu.add(verVl);

		anFondoAcartera.setText("Añadir Fondo");
		anFondoAcartera.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				anFondoAcarteraActionPerformed(evt);
			}
		});
		anadirVlExcel.setText("Importar Vls");
		anadirVlExcel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				anadirVlExcelActionPerformed(evt);
			}
		});
		fondoMenu.add(anadirVlExcel);

		exportarExcel.setText("Exportar Fondo");
		exportarExcel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exportarExcelActionPerformed(evt);
			}
		});
		fondoMenu.add(exportarExcel);

		carteraMenu.add(anFondoAcartera);

		elFondoCartera.setText("Eliminar Fondo");
		elFondoCartera.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				elFondoCarteraActionPerformed(evt);
			}
		});
		carteraMenu.add(elFondoCartera);

		actualizarCartera.setText("Actualizar Cartera");
		actualizarCartera.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				actualizarCarteraActionPerformed(evt);
			}
		});
		carteraMenu.add(actualizarCartera);

		borrarCartera.setText("Borrar Cartera");
		borrarCartera.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				borrarCarteraActionPerformed(evt);
			}
		});
		carteraMenu.add(borrarCartera);

		anOperacion.setText("Añadir Operación");
		anOperacion.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				anOperacionActionPerformed(evt);
			}
		});
		carteraMenu.add(anOperacion);

		verOperaciones.setText("Ver Operaciones");
		verOperaciones.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				verOperacionesActionPerformed(evt);
			}
		});
		carteraMenu.add(verOperaciones);

		actuOp.setText("Actualizar");
		actuOp.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				actuOpActionPerformed(evt);
			}
		});
		opMenu.add(actuOp);

		borrarOp.setText("Borrar");
		borrarOp.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				borrarOpActionPerformed(evt);
			}
		});
		opMenu.add(borrarOp);

		selectorDeFichero.setDialogTitle("Seleccionar Fichero");
		selectorDeFichero.setName("Seleccionar Fichero");

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Aplicación para el análisis de carteras de fondos de inversión");
		setName("Ventana Principal"); // NOI18N
		setSize(new java.awt.Dimension(1024, 768));
		buscarText.setText("");
		buscarText.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buscarTextActionPerformed(evt);
			}
		});

		try {
			buscarLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("buscar.png")));
		} catch (java.lang.NullPointerException e) {

		}

		treeSelectionListener = new javax.swing.event.TreeSelectionListener() {
			public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
				arbolFondosValueChanged(evt);
			}
		};

		treeMouseAdapter = new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				arbolFondosMousePressed(evt);
			}

			public void mouseReleased(java.awt.event.MouseEvent evt) {
				arbolFondosMouseReleased(evt);
			}
		};

		arbolFondos.addMouseListener(treeMouseAdapter);
		arbolFondos.addTreeSelectionListener(treeSelectionListener);

		arbolFondos2.addMouseListener(treeMouseAdapter);
		arbolFondos2.addTreeSelectionListener(treeSelectionListener);

		jScrollPane2.setViewportView(content);

		panelGraficas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		panelGraficas.setPreferredSize(new java.awt.Dimension(1000, 700));
		panelGraficas.setRequestFocusEnabled(false);

		javax.swing.GroupLayout panelGraficasLayout = new javax.swing.GroupLayout(panelGraficas);
		panelGraficas.setLayout(panelGraficasLayout);
		panelGraficasLayout.setHorizontalGroup(panelGraficasLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 759, Short.MAX_VALUE));
		panelGraficasLayout.setVerticalGroup(panelGraficasLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 566, Short.MAX_VALUE));

		descripcionTex.setEditable(false);
		jScrollPane6.setViewportView(descripcionTex);

		graficasBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				graficasBoxActionPerformed(evt);
			}
		});
		graficasBox.setVisible(false);

		rentaText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
		rentaText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		rentaText.setValue(0.0);

		rentaEstimadaLabel.setText("Rentabilidad Estimada (%):");

		calcularBoton.setText("Calcular");
		calcularBoton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				calcularBotonActionPerformed(evt);
			}
		});

		progressLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		progressLabel.setText("Actualizando Modelo:");

		jMenu3.setText("Archivo");

		desdeLabel.setText("Desde: ");

		hastaLabel.setText("Hasta: ");

		calcularBoton.setVisible(false);
		rentaText.setVisible(false);
		rentaEstimadaLabel.setVisible(false);

		desdeDate.setVisible(false);
		hastaDate.setVisible(false);

		desdeLabel.setVisible(false);
		hastaLabel.setVisible(false);

		desdeDate.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				desdeHastaDateActionPerformed(evt);
			}
		});

		hastaDate.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				desdeHastaDateActionPerformed(evt);
			}
		});

		botonAnadirFondo.setText("Nuevo Fondo");
		botonAnadirFondo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				botonAnadirFondoActionPerformed(evt);
			}
		});
		jMenu3.add(botonAnadirFondo);

		botonAnadirCartera.setText("Nueva Cartera");
		botonAnadirCartera.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				botonAnadirCarteraActionPerformed(evt);
			}
		});
		jMenu3.add(botonAnadirCartera);

		importarFondo.setText("Importar fondo");
		importarFondo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				importarFondoActionPerformed(evt);
			}
		});
		jMenu3.add(importarFondo);

		barraMenu.add(jMenu3);

		jMenu4.setText("Editar");
		barraMenu.add(jMenu4);

		this.setJMenuBar(barraMenu);

		principalBoton1.setText("30 Días");
		buttonGroup2.add(principalBoton1);
		principalBoton1.setVisible(false);
		principalBoton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				principalBotonActionPerformed(evt);
			}
		});

		principalBoton2.setText("90 Días");
		buttonGroup2.add(principalBoton2);
		principalBoton2.setVisible(false);
		principalBoton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				principalBotonActionPerformed(evt);
			}
		});

		principalBoton3.setText("200 Días");
		buttonGroup2.add(principalBoton3);
		principalBoton3.setVisible(false);
		principalBoton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				principalBotonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGroup(
										javax.swing.GroupLayout.Alignment.TRAILING,
										layout.createSequentialGroup().addComponent(buscarText)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(buscarLabel))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										layout.createSequentialGroup()
												.addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE,
														120, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 80,
														javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGap(10, 10, 10)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(
										panelGraficas, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addComponent(jScrollPane6).addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										layout.createSequentialGroup()
												.addComponent(graficasBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(rentaEstimadaLabel)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(rentaText, javax.swing.GroupLayout.PREFERRED_SIZE, 70,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(calcularBoton)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(principalBoton1)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(principalBoton2)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(principalBoton3)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(desdeLabel)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(desdeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(12, 12, 12).addComponent(hastaLabel)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(hastaDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120,
														javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGap(10, 10, 10)));

		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(buscarText, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(buscarLabel)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(hastaDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(desdeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(desdeLabel).addComponent(hastaLabel).addComponent(principalBoton1)
										.addComponent(principalBoton2).addComponent(principalBoton3)
										.addComponent(graficasBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(rentaText, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(rentaEstimadaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(calcularBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

								.addGroup(layout.createSequentialGroup()

										.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))

								.addGroup(layout.createSequentialGroup()
										.addComponent(panelGraficas, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 96,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGap(10, 10, 10)));

		layout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { buscarLabel, buscarText, graficasBox });

		layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] { desdeLabel, hastaLabel,
				principalBoton1, principalBoton2, principalBoton3, rentaEstimadaLabel, rentaText, calcularBoton });

		layout.linkSize(javax.swing.SwingConstants.VERTICAL,
				new java.awt.Component[] { desdeDate, hastaDate, buscarLabel, buscarText, graficasBox });

		layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] { progressLabel, progressBar });

		pack();
	}// </editor-fold>

	//////////////////////////////////////////////////////////////////////////////////////////

	// Click en el boton de aÃ±adir fondo del menu archivo -> aÃ±adir
	private void botonAnadirFondoActionPerformed(java.awt.event.ActionEvent evt) {

		isinText.setText("");
		nombreText.setText("");
		gestoraText.setText("");
		tipoText.setText("");
		categoriaText.setText("");
		cancelComText.setValue(0);
		apComText.setValue(0);
		divisaText.setText("");

		anadirFondo.setLocationRelativeTo(this);
		anadirFondo.setVisible(true);

	}

	// Click en el boton aceptar de la ventana de aÃ±adir fondo
	private void anadFondoBotonActionPerformed(java.awt.event.ActionEvent evt) {

		FundDesc fund = new FundDesc(isinText.getText(), nombreText.getText(), gestoraText.getText(),
				tipoText.getText(), categoriaText.getText(), divisaText.getText(),
				Double.valueOf(apComText.getValue().toString()) / 100,
				Double.valueOf(cancelComText.getValue().toString()) / 100);

		try {
			fundService.addFund(fund);
		} catch (InputValidationException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		progressLabel.setText("Actualizando Modelo:");
		FundWorker createNodes = new FundWorker(fundService, arbolFondos2, top2, progressLabel, buscarText.getText());
		createNodes.addPropertyChangeListener(progressBarListener);
		createNodes.execute();

		anadirFondo.setVisible(false);

	}

	// Click en el boton cancelar de la ventana de aÃ±adir fondo
	private void canAnaFondoBotonActionPerformed(java.awt.event.ActionEvent evt) {

		anadirFondo.setVisible(false);

	}

	// Click en el boton de aÃ±adir cartera del menu archivo -> aÃ±adir
	private void botonAnadirCarteraActionPerformed(java.awt.event.ActionEvent evt) {

		descCarteraText.setText("");
		nomCarteraText.setText("");
		anadirCartera.setLocationRelativeTo(this);
		anadirCartera.setVisible(true);

	}

	// Click en el boton cancelar de la ventana de aÃ±adir cartera
	private void canAnaCarteraBotonActionPerformed(java.awt.event.ActionEvent evt) {

		anadirCartera.setVisible(false);

	}

	// Click en el boton aÃ±adir de la ventana de aÃ±adir cartera
	private void anaCarteraBotonActionPerformed(java.awt.event.ActionEvent evt) {

		FundPort fundPort = new FundPort(nomCarteraText.getText(), descCarteraText.getText());
		try {
			fundService.addFundPortfolio(fundPort);
		} catch (InputValidationException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		progressLabel.setText("Actualizando Modelo:");
		PortfolioWorker createNodes = new PortfolioWorker(fundService, arbolFondos, top, progressLabel);
		createNodes.addPropertyChangeListener(progressBarListener);
		createNodes.execute();

		anadirCartera.setVisible(false);
	}

	// Seleccionar un elemento del arbol
	private void arbolFondosValueChanged(javax.swing.event.TreeSelectionEvent evt) {

		selectedTree = (JTree) evt.getSource();
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();

		if (node == null) {
			panelGraficas.removeAll();
			panelGraficas.updateUI();
			descripcionTex.setText("");
			return;
		}

		Object nodeInfo = node.getUserObject();

		desdeDate.setVisible(false);
		hastaDate.setVisible(false);
		desdeLabel.setVisible(false);
		hastaLabel.setVisible(false);

		principalBoton1.setVisible(false);
		principalBoton2.setVisible(false);
		principalBoton3.setVisible(false);

		rentaText.setVisible(false);
		rentaEstimadaLabel.setVisible(false);
		calcularBoton.setVisible(false);

		if (nodeInfo.getClass() == tfg.app.model.entities.FundDesc.class) {

			tablaVls.setLocationRelativeTo(this);

			graficasBox.setModel(new javax.swing.DefaultComboBoxModel<>(
					new String[] { "Descripción", "Historial Vl", "Hist Renta", "Renta Esperada", "Media Móvil" }));

			graficasBox.setSelectedItem("Descripción");
			graficasBox.setVisible(true);

		} else if (nodeInfo.getClass() == tfg.app.model.entities.FundPort.class) {

			graficasBox.setModel(new javax.swing.DefaultComboBoxModel<>(
					new String[] { "Distribución", "Fondos Norm", "Rent de los fondos", "Rent total", "Comparativa" }));

			graficasBox.setSelectedItem("Distribución");
			graficasBox.setVisible(true);

		} else {

			desdeDate.setVisible(false);
			hastaDate.setVisible(false);
			desdeLabel.setVisible(false);
			hastaLabel.setVisible(false);

			principalBoton1.setVisible(false);
			principalBoton2.setVisible(false);
			principalBoton3.setVisible(false);

			rentaText.setVisible(false);
			rentaEstimadaLabel.setVisible(false);
			calcularBoton.setVisible(false);

			graficasBox.setVisible(false);

			panelGraficas.removeAll();
			panelGraficas.updateUI();
			descripcionTex.setText("");
		}

		if (selectedTree.equals(arbolFondos)) {
			arbolFondos2.removeTreeSelectionListener(treeSelectionListener);
			arbolFondos2.clearSelection();
			arbolFondos2.addTreeSelectionListener(treeSelectionListener);
		} else {
			arbolFondos.removeTreeSelectionListener(treeSelectionListener);
			arbolFondos.clearSelection();
			arbolFondos.addTreeSelectionListener(treeSelectionListener);
		}
	}

	// Popupmenu en el arbol
	private void arbolFondosMousePressed(java.awt.event.MouseEvent evt) {
		if (evt.isPopupTrigger()) {

			DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();

			if (node == null) {
				System.out.println("asd");
				return;
			}
			Object nodeInfo = node.getUserObject();

			if (nodeInfo.getClass() == tfg.app.model.entities.FundDesc.class) {
				fondoMenu.show(evt.getComponent(), evt.getX(), evt.getY());
				return;
			}
			if (nodeInfo.getClass() == tfg.app.model.entities.FundPort.class) {
				carteraMenu.show(evt.getComponent(), evt.getX(), evt.getY());
				return;
			}

		}

	}

	// Popupmenu en el arbol
	private void arbolFondosMouseReleased(java.awt.event.MouseEvent evt) {

		if (evt.isPopupTrigger()) {

			DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();

			if (node == null) {

				System.out.println("asd");
				return;
			}
			Object nodeInfo = node.getUserObject();

			if (nodeInfo.getClass() == tfg.app.model.entities.FundDesc.class) {
				fondoMenu.show(evt.getComponent(), evt.getX(), evt.getY());
				return;
			}
			if (nodeInfo.getClass() == tfg.app.model.entities.FundPort.class) {
				carteraMenu.show(evt.getComponent(), evt.getX(), evt.getY());
				return;
			}

		}
	}

	// Actualizar del popupmenu de vl
	private void actuVlActionPerformed(java.awt.event.ActionEvent evt) {

		FundVl fundVl;
		try {
			DefaultTableModel model = (DefaultTableModel) vlTabla.getModel();
			int row = vlTabla.getSelectedRow();
			fundVl = (FundVl) model.getValueAt(row, 1);
		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
			return;
		}

		vlIsinLabel2.setText(fundVl.getFundDesc().getfId());
		vlFechaLabel2.setText(fundVl.getDay().toString());
		vlVlText1.setValue(fundVl.getVl());

		actuaVl.setLocationRelativeTo(this);
		actuaVl.setVisible(true);
	}

	// Borrar del popupmenu de vl
	private void borrarVlActionPerformed(java.awt.event.ActionEvent evt) {

		FundVl fundVl;
		try {
			DefaultTableModel model = (DefaultTableModel) vlTabla.getModel();
			int row = vlTabla.getSelectedRow();
			fundVl = (FundVl) model.getValueAt(row, 1);
		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
			return;
		}

		int input = JOptionPane.showConfirmDialog(this, "¿Desea borrar el Vl del día: " + fundVl.getDay() + " ?",
				"Confirmación", JOptionPane.YES_NO_OPTION);

		if (input == 0) {

			try {

				fundService.removeFundVl(fundVl);
			} catch (InstanceNotFoundException e) {
				JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de borrado",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			verVlActionPerformed(evt);
		}

	}

	// Anadir vl del popumpmenu de Fondo
	private void anadVlaFondoActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundDesc fundDesc = (FundDesc) nodeInfo;

		vlIsinIdLabel.setText(fundDesc.getfId());
		vlVlText.setValue(0);

		LocalDate date = LocalDate.now();
		model3.setDate(date.getYear(), date.getMonthValue() - 1, date.getDayOfMonth());

		anadirVl.setLocationRelativeTo(this);
		anadirVl.setVisible(true);

	}

	// Actualizar del popupmenu de Fondo
	private void actualizarFondoActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundDesc fundDesc = (FundDesc) nodeInfo;

		isinLabel1.setText("ISIN: ");
		isinLabel2.setText(fundDesc.getfId());
		nombreText1.setText(fundDesc.getfName());
		gestoraText1.setText(fundDesc.getfGest());
		tipoText1.setText(fundDesc.getfType());
		categoriaText1.setText(fundDesc.getfCategory());
		cancelComText1.setValue(fundDesc.getfCancelComm() * 100);
		apComText1.setValue(fundDesc.getfSubComm() * 100);
		divisaText1.setText(fundDesc.getfCurrency());

		actuaFondo.setLocationRelativeTo(this);
		actuaFondo.setVisible(true);
	}

	// Borrar del popupmenu de Fondo
	private void borrarFondoActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundDesc fundDesc = (FundDesc) nodeInfo;

		int input = JOptionPane.showConfirmDialog(this, "¿Desea borrar el fondo " + fundDesc.getfName() + " ?",
				"Confirmación", JOptionPane.YES_NO_OPTION);

		if (input == 0) {

			try {
				fundService.removeFund(fundDesc);
			} catch (InstanceNotFoundException e) {
				JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de borrado",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			progressLabel.setText("Actualizando Modelo:");
			NodesWorker createNodes = new NodesWorker(fundService, arbolFondos, arbolFondos2, top, top2, progressLabel);
			createNodes.addPropertyChangeListener(progressBarListener);
			createNodes.execute();

		}

	}

	// Anadir fondo a cartera del popupmenu de cartera
	private void anFondoAcarteraActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;

		carteraLabel.setText(fundPort.getpName() + ":");

		List<FundDesc> allFunds = fundService.findAllFunds();
		List<FundDesc> fundsOfPortfolio = null;

		try {
			fundsOfPortfolio = fundService.findFundsOfPortfolio(fundPort);
		} catch (InstanceNotFoundException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		allFunds.removeAll(fundsOfPortfolio);

		fondoDesplegable.removeAllItems();

		for (int x = 0; x < allFunds.size(); x++) {
			fondoDesplegable.addItem(allFunds.get(x));
		}
		anadirFondoCartera.setLocationRelativeTo(this);
		anadirFondoCartera.setVisible(true);
	}

	// Actualizar cartera del popupmenu de cartera
	private void actualizarCarteraActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;

		nomCarteraText1.setText(fundPort.getpName());
		descCarteraText1.setText(fundPort.getpDesc());

		actuaCartera.setLocationRelativeTo(this);
		actuaCartera.setVisible(true);

	}

	// Click en cerrar la ventana de la tabla de ops
	private void tablaOpsWindowClosing(java.awt.event.WindowEvent evt) {

		// progressLabel.setText("Actualizando Modelo:");
		// PortfolioWorker createNodes = new PortfolioWorker(fundService,
		// arbolFondos, top, progressLabel);
		// createNodes.addPropertyChangeListener(progressBarListener);
		// createNodes.execute();
	}

	// Click en cerrar la ventana de la tabla de vls
	private void tablaVlsWindowClosing(java.awt.event.WindowEvent evt) {

		// progressLabel.setText("Actualizando Modelo:");
		// PortfolioWorker createNodes = new PortfolioWorker(fundService,
		// arbolFondos, top, progressLabel);
		// createNodes.addPropertyChangeListener(progressBarListener);
		// createNodes.execute();
	}

	// Borrar cartera del popupmenu de cartera
	private void borrarCarteraActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;

		int input = JOptionPane.showConfirmDialog(this, "¿Desea borrar la cartera: " + fundPort.getpName() + " ?",
				"Confirmación", JOptionPane.YES_NO_OPTION);

		if (input == 0) {

			try {
				fundService.removeFundPortfolio(fundPort);
			} catch (InstanceNotFoundException e) {
				JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de borrado",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			progressLabel.setText("Actualizando Modelo:");
			PortfolioWorker createNodes = new PortfolioWorker(fundService, arbolFondos, top, progressLabel);
			createNodes.addPropertyChangeListener(progressBarListener);
			createNodes.execute();

		}

	}

	// Click en el boton de cancelar de la ventana actualizar fondo
	private void canActuaFondoBoton1ActionPerformed(java.awt.event.ActionEvent evt) {

		actuaFondo.setVisible(false);

	}

	// Click en el boton de aceptar de la ventana actualizar fondo
	private void actuaFondoBoton1ActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundDesc fundDesc = (FundDesc) nodeInfo;

		fundDesc.setfName(nombreText1.getText());
		fundDesc.setfType(tipoText1.getText());
		fundDesc.setfGest(gestoraText1.getText());
		fundDesc.setfCategory(categoriaText1.getText());
		fundDesc.setfCurrency(divisaText1.getText());
		fundDesc.setfCancelComm(Double.valueOf(cancelComText1.getValue().toString()) / 100);
		fundDesc.setfSubComm(Double.valueOf(apComText1.getValue().toString()) / 100);

		try {

			fundService.updateFund(fundDesc);

		} catch (InputValidationException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		actuaFondo.setVisible(false);

		progressLabel.setText("Actualizando Modelo:");
		NodesWorker createNodes = new NodesWorker(fundService, arbolFondos, arbolFondos2, top, top2, progressLabel);
		createNodes.addPropertyChangeListener(progressBarListener);
		createNodes.execute();
	}

	// Click en el boton de aceptar de la ventana anadir VL
	private void vlAccBotonActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundDesc fundDesc = (FundDesc) nodeInfo;
		LocalDate date = null;

		try {

			Date input = (Date) model3.getValue();
			date = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

		} catch (java.lang.NullPointerException e) {
			JOptionPane.showMessageDialog(ventanaError, "Debe seleccionar una fecha en el calendario.",
					"Error de actualización", JOptionPane.ERROR_MESSAGE);
			return;
		}

		FundVl fundVl = new FundVl(date, Double.valueOf(vlVlText.getValue().toString()), fundDesc);

		try {
			fundService.addFundVl(fundVl);
		} catch (InputValidationException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}
		anadirVl.setVisible(false);
	}

	// Click en el boton de cancelar de la ventana anadir VL
	private void vlCancBotonActionPerformed(java.awt.event.ActionEvent evt) {

		anadirVl.setVisible(false);

	}

	// Eliminar fondo de cartera del popupmenu de cartera
	private void elFondoCarteraActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;

		carteraLabel1.setText(fundPort.getpName() + ":");

		List<FundDesc> fundsOfPortfolio = null;

		try {
			fundsOfPortfolio = fundService.findFundsOfPortfolio(fundPort);
		} catch (InstanceNotFoundException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		fondoDesplegable1.removeAllItems();

		for (int x = 0; x < fundsOfPortfolio.size(); x++) {
			fondoDesplegable1.addItem(fundsOfPortfolio.get(x));
		}

		borrarFondoCartera.setLocationRelativeTo(this);
		borrarFondoCartera.setVisible(true);

	}

	// Añadir operacion del popupmenu de cartera
	private void anOperacionActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;

		opCarteraLabel.setText(fundPort.getpName());
		compraBoton.setSelected(true);
		LocalDate date = LocalDate.now();
		model3.setDate(date.getYear(), date.getMonthValue() - 1, date.getDayOfMonth());

		List<FundDesc> fundsOfPortfolio = null;

		try {
			fundsOfPortfolio = fundService.findFundsOfPortfolio(fundPort);
		} catch (InstanceNotFoundException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		fondoDesplegable2.removeAllItems();

		for (int x = 0; x < fundsOfPortfolio.size(); x++) {
			fondoDesplegable2.addItem(fundsOfPortfolio.get(x));
		}

		opOperacionText.setValue(0);
		anadirOp.setLocationRelativeTo(this);
		anadirOp.setVisible(true);

	}

	// Ver operaciones del popupmenu de cartera
	private void verOperacionesActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;

		List<FundDesc> fundsOfPortfolio = null;

		try {
			fundsOfPortfolio = fundService.findFundsOfPortfolio(fundPort);
		} catch (InstanceNotFoundException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		selFondoDespl.removeAllItems();

		for (int x = 0; x < fundsOfPortfolio.size(); x++) {
			selFondoDespl.addItem(fundsOfPortfolio.get(x));
		}

		tablaOps.setLocationRelativeTo(this);
		tablaOps.setTitle("Operaciones de la cartera: " + fundPort.getpName());
		tablaOps.setVisible(true);

	}

	private void opTablaMouseReleased(java.awt.event.MouseEvent evt) {
		if (evt.isPopupTrigger()) {

			opMenu.show(evt.getComponent(), evt.getX(), evt.getY());

		}
	}

	// Actualizar operacion del popupmenu de operaciones
	private void actuOpActionPerformed(java.awt.event.ActionEvent evt) {

		PortOp portOp;
		try {
			DefaultTableModel model = (DefaultTableModel) opTabla.getModel();
			int row = opTabla.getSelectedRow();
			portOp = (PortOp) model.getValueAt(row, 0);
		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
			return;
		}

		opCarteraLabel1.setText(portOp.getPortDesc().getFundPort().getpName());
		opIsinLabel1.setText(portOp.getPortDesc().getFundDesc().getfName());
		opFechaLabel2.setText(portOp.getDay().toString());
		opOperacionText1.setValue(portOp.getfPartOp());

		compraBoton1.setSelected(true);

		actuaOp.setLocationRelativeTo(this);
		actuaOp.setVisible(true);
	}

	// Borrar operacion del popupmenu de operaciones
	private void borrarOpActionPerformed(java.awt.event.ActionEvent evt) {
		PortOp portOp;
		try {
			DefaultTableModel model = (DefaultTableModel) opTabla.getModel();
			int row = opTabla.getSelectedRow();
			portOp = (PortOp) model.getValueAt(row, 0);
		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
			return;
		}

		int input = JOptionPane.showConfirmDialog(this,
				"¿Desea borrar el la operación del día: " + portOp.getDay() + " ?", "Confirmación",
				JOptionPane.YES_NO_OPTION);

		if (input == 0) {

			try {
				fundService.removePortOp(portOp);
			} catch (InputValidationException | InstanceNotFoundException e) {
				JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			selFondoDesplActionPerformed(evt);
		}

	}

	// Click en el boton cancelar de la ventana actualizar cartera
	private void canAnaCarteraBoton1ActionPerformed(java.awt.event.ActionEvent evt) {

		actuaCartera.setVisible(false);

	}

	// Click en el boton aceptar de la ventana actualizar cartera
	private void anaCarteraBoton1ActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;

		fundPort.setpName(nomCarteraText1.getText());
		fundPort.setpDesc(descCarteraText1.getText());

		try {

			fundService.updateFundPortfolio(fundPort);

		} catch (InstanceNotFoundException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de actualización",
					JOptionPane.ERROR_MESSAGE);
			return;
		} catch (InputValidationException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de actualización",
					JOptionPane.ERROR_MESSAGE);
			return;
		} finally {

			progressLabel.setText("Actualizando Modelo:");
			PortfolioWorker createNodes = new PortfolioWorker(fundService, arbolFondos, top, progressLabel);
			createNodes.addPropertyChangeListener(progressBarListener);
			createNodes.execute();

		}

		actuaCartera.setVisible(false);
	}

	private void buscarTextActionPerformed(java.awt.event.ActionEvent evt) {

		progressLabel.setText("Actualizando Modelo:");
		FundWorker createNodes = new FundWorker(fundService, arbolFondos2, top2, progressLabel, buscarText.getText());
		createNodes.addPropertyChangeListener(progressBarListener);
		createNodes.execute();
	}

	// Click en el boton cancelar de la ventana actualizar vl
	private void vlCancBoton1ActionPerformed(java.awt.event.ActionEvent evt) {
		actuaVl.setVisible(false);
	}

	// Click en el boton aceptar de la ventana actualizar vl
	private void vlAccBoton1ActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultTableModel model = (DefaultTableModel) vlTabla.getModel();
		int row = vlTabla.getSelectedRow();
		FundVl fundVl = (FundVl) model.getValueAt(row, 1);

		fundVl.setVl(Double.valueOf(vlVlText1.getValue().toString()));

		try {
			fundService.updateFundVl(fundVl);
		} catch (InputValidationException | InstanceNotFoundException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		actuaVl.setVisible(false);

		verVlActionPerformed(evt);
	}

	// Click en el boton aceptar de la ventana anadir operacion
	private void opAccBotonActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;
		LocalDate date = null;

		FundDesc fundDesc = (FundDesc) fondoDesplegable2.getSelectedItem();

		Integer x = Integer.valueOf(opOperacionText.getValue().toString());
		x = Math.abs(x);// Quizas es mejor formatear la entrada de texto para
						// que no admita valores negativos

		if (ventaBoton.isSelected()) {
			x = x * -1;
		}

		if (fundDesc == null) {
			anadirOp.setVisible(false);
			return;
		}

		try {

			Date input = (Date) model3.getValue();
			date = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

		} catch (java.lang.NullPointerException e) {
			JOptionPane.showMessageDialog(ventanaError, "Debe seleccionar una fecha en el calendario.",
					"Error de actualización", JOptionPane.ERROR_MESSAGE);
			return;
		}

		try {

			PortOp portOp = new PortOp(date, fundPort, fundDesc, x);

			fundService.addPortOp(portOp);
		} catch (InputValidationException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de actualización",
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		anadirOp.setVisible(false);

	}

	// Click en el boton cancelar de la ventana anadir operacion
	private void opCancBotonActionPerformed(java.awt.event.ActionEvent evt) {

		anadirOp.setVisible(false);
		progressLabel.setText("Actualizando Modelo:");

	}

	// Click en el boton aceptar de la ventana actualizar operacion
	private void opAccBoton1ActionPerformed(java.awt.event.ActionEvent evt) {

		PortOp portOp;
		try {
			DefaultTableModel model = (DefaultTableModel) opTabla.getModel();
			int row = opTabla.getSelectedRow();
			portOp = (PortOp) model.getValueAt(row, 0);
		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
			return;
		}

		if (portOp == null) {
			actuaOp.setVisible(false);
			return;
		}

		try {

			Integer x = Integer.valueOf(opOperacionText1.getValue().toString());
			x = Math.abs(x);

			if (ventaBoton1.isSelected()) {
				x = x * -1;
			}

			portOp.setfPartOp(x);

		} catch (NumberFormatException e) {

			JOptionPane.showMessageDialog(ventanaError, "El valor de la operación ha de ser un entero.",
					"Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;

		}

		try {
			fundService.UpdatePortOp(portOp);
		} catch (InputValidationException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}
		actuaOp.setVisible(false);

		selFondoDesplActionPerformed(evt);
	}

	// Click en el boton cancelar de la ventana actualizar operacion
	private void opCancBoton1ActionPerformed(java.awt.event.ActionEvent evt) {

		actuaOp.setVisible(false);
	}

	// Click en el boton aceptar de la ventana de confirmacion
	private void aceptarConfirBotonActionPerformed(java.awt.event.ActionEvent evt) {

	}

	// Click en el boton cancelar de la ventana de confirmacion
	private void cancelarConfirBotonActionPerformed(java.awt.event.ActionEvent evt) {
		//
	}

	// Click en el boton de aceptar de la ventana añadir fondo a cartera
	private void aceptAnFondoCartBotonActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();

		FundPort fundPort = (FundPort) nodeInfo;

		FundDesc fundDesc = (FundDesc) fondoDesplegable.getSelectedItem();

		if (fundDesc == null) {

			anadirFondoCartera.setVisible(false);
			return;

		}

		try {
			fundService.addPortDesc(fundPort, fundDesc);
		} catch (InstanceNotFoundException | InputValidationException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de actualización",
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		progressLabel.setText("Actualizando Modelo:");
		PortfolioWorker createNodes = new PortfolioWorker(fundService, arbolFondos, top, progressLabel);
		createNodes.addPropertyChangeListener(progressBarListener);
		createNodes.execute();

		anadirFondoCartera.setVisible(false);

	}

	// Click en el boton cancelar de la ventana añadir fondo a cartera
	private void canAnFondoCartBotonActionPerformed(java.awt.event.ActionEvent evt) {

		anadirFondoCartera.setVisible(false);

	}

	// Click en el boton cancelar de la ventana borrar fondo de cartera
	private void canBoFondoCartBotonActionPerformed(java.awt.event.ActionEvent evt) {

		borrarFondoCartera.setVisible(false);

	}

	// Click en el boton aceptar de la ventana borrar fondo de cartera
	private void aceptBoFondoCartBotonActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;

		FundDesc fundDesc = (FundDesc) fondoDesplegable1.getSelectedItem();

		if (fundDesc == null) {

			borrarFondoCartera.setVisible(false);
			return;

		}

		try {
			fundService.removePortDesc(fundPort, fundDesc);
		} catch (InstanceNotFoundException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de borrado", JOptionPane.ERROR_MESSAGE);
			return;
		}

		progressLabel.setText("Actualizando Modelo:");
		PortfolioWorker createNodes = new PortfolioWorker(fundService, arbolFondos, top, progressLabel);
		createNodes.addPropertyChangeListener(progressBarListener);
		createNodes.execute();

		borrarFondoCartera.setVisible(false);

	}

	// Click en ver vl del popupmenu de fondo
	private void verVlActionPerformed(java.awt.event.ActionEvent evt) {
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundDesc fundDesc = (FundDesc) nodeInfo;

		DefaultTableModel model = (DefaultTableModel) vlTabla.getModel();
		model.setRowCount(0);

		if (fundDesc == null) {
			return;
		}

		try {
			fundDesc = fundService.findFund(fundDesc.getfId());
		} catch (InstanceNotFoundException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		for (int x = 0; x < fundDesc.getFundVls().size(); x++) {

			FundVl fundVl = fundDesc.getFundVls().get(x);

			if (x != 0) {

				FundVl fundVl1 = fundDesc.getFundVls().get(x - 1);

				double rent = ((fundVl.getVl() - fundVl1.getVl()) / fundVl1.getVl()) * 100;

				rent = new BigDecimal(rent).setScale(4, RoundingMode.HALF_UP).doubleValue();

				model.addRow(new Object[] { fundDesc.getfId(), fundVl, String.format("%.4f", fundVl.getVl()), rent });

			} else {
				model.addRow(new Object[] { fundDesc.getfId(), fundVl, String.format("%.4f", fundVl.getVl()), 0.0 });
			}
		}
		tablaVls.setTitle("Valores liquidativos del fondo: " + fundDesc.getfName());
		tablaVls.setVisible(true);
	}

	// Click derecho en la tabla de vls
	private void vlTablaMousePressed(java.awt.event.MouseEvent evt) {
		// DefaultTableModel model = (DefaultTableModel) vlTabla.getModel();
		// int row = vlTabla.getSelectedRow();
		// System.out.println(row);
		// FundVl fundVl = (FundVl) model.getValueAt(row, 1);
		// System.out.println(fundVl);
	}

	// Popupmenu en la tabla de vls
	private void vlTablaMouseReleased(java.awt.event.MouseEvent evt) {

		if (evt.isPopupTrigger()) {

			vlMenu.show(evt.getComponent(), evt.getX(), evt.getY());

		}

	}

	// Seleccion de una fecha en el calendario hasta o desde
	private void desdeHastaDateActionPerformed(java.awt.event.ActionEvent evt) {
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();

		FundDesc fundDesc = null;
		LocalDate date1 = null;
		LocalDate date2 = null;

		if (node == null) {
			JOptionPane.showMessageDialog(ventanaError, "Seleccione un fondo.", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		Object nodeInfo = node.getUserObject();

		if (nodeInfo.getClass() == tfg.app.model.entities.FundDesc.class) {

			fundDesc = (FundDesc) nodeInfo;

			if (fundDesc.getFundVls().size() == 0) {
				date1 = LocalDate.now();
				date2 = LocalDate.now();

				model1.setDate(date1.getYear(), date1.getMonthValue() - 1, date1.getDayOfMonth());
				model2.setDate(date2.getYear(), date2.getMonthValue() - 1, date2.getDayOfMonth());

				ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
				worker.setFundVlLineChart(fundDesc, null, null);
				worker.execute();

				return;
			} else {

				try {

					Date input = (Date) model1.getValue();
					date1 = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

				} catch (NullPointerException e) {

					date1 = fundDesc.getFundVls().get(0).getDay();
					model1.setDate(date1.getYear(), date1.getMonthValue() - 1, date1.getDayOfMonth());

				}
				try {

					Date input = (Date) model2.getValue();
					date2 = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

				} catch (NullPointerException e) {

					date2 = fundDesc.getFundVls().get(fundDesc.getFundVls().size() - 1).getDay();
					model2.setDate(date2.getYear(), date2.getMonthValue() - 1, date2.getDayOfMonth());

				}

				if (date2.compareTo(date1) <= 0) {

					JOptionPane.showMessageDialog(ventanaError,
							"La fecha de inicio no puede ser superior a la fecha final.", "Error de entrada",
							JOptionPane.ERROR_MESSAGE);

					date2 = date1.plusDays(1);
					model2.setDate(date2.getYear(), date2.getMonthValue() - 1, date2.getDayOfMonth());

				}

			}

			if (graficasBox.getSelectedItem().equals("Historial Vl")) {

				ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
				worker.setFundVlLineChart(fundDesc, date1, date2);
				worker.execute();

			}

			if (graficasBox.getSelectedItem().equals("Renta Esperada")) {

				Double rent = null;

				if (Double.valueOf(rentaText.getValue().toString()) != 0) {

					rent = Double.valueOf(rentaText.getValue().toString());

				}

				ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
				worker.setEstimateProfitOfFundDescLineChart(fundDesc, rent, date1, date2);
				worker.execute();

			}

		}

	}

	// Boton importar fondo del menu de archivo
	private void importarFondoActionPerformed(java.awt.event.ActionEvent evt) {

		selectorDeFichero.setSelectedFile(new File(""));
		int returnVal = selectorDeFichero.showOpenDialog(this);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = selectorDeFichero.getSelectedFile();

			progressLabel.setText("Importando Fondo:");
			progressBar.setIndeterminate(true);
			NodesWorker createNodes = new NodesWorker(fundService, arbolFondos, arbolFondos2, top, top2, progressLabel);
			createNodes.addPropertyChangeListener(progressBarListener);

			ImportFundWorker importFund = new ImportFundWorker(fundService, progressLabel, progressBar, createNodes,
					file);
			importFund.execute();

		}

	}

	// Boton exportar a excel del popupmenu de fondo
	private void exportarExcelActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();

		FundDesc fundDesc = null;

		if (node == null) {
			return;
		}
		Object nodeInfo = node.getUserObject();

		if (nodeInfo.getClass() == tfg.app.model.entities.FundDesc.class) {

			fundDesc = (FundDesc) nodeInfo;

			selectorDeFichero.setSelectedFile(new File(fundDesc.getfName() + ".xls"));
			int returnVal = selectorDeFichero.showSaveDialog(this);
			File file = null;
			if (returnVal == JFileChooser.APPROVE_OPTION) {

				file = selectorDeFichero.getSelectedFile();

				if (FilenameUtils.getExtension(file.getName()).equalsIgnoreCase("xls")) {
					// filename is OK as-is
				} else {
					file = new File(file.toString() + ".xls"); // append .xls
					file = new File(file.getParentFile(), FilenameUtils.getBaseName(file.getName()) + ".xls");
				}

				try {
					fundService.exportFundDescToExcel(fundDesc, file);
				} catch (InputValidationException e) {
					JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error al exportar",
							JOptionPane.ERROR_MESSAGE);
				}

			} else {

			}

		}
	}

	// Boton importar vls desde excel del popupmenu de fondo
	private void anadirVlExcelActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();

		FundDesc fundDesc = null;

		if (node == null) {
			return;
		}
		Object nodeInfo = node.getUserObject();

		if (nodeInfo.getClass() == tfg.app.model.entities.FundDesc.class) {

			fundDesc = (FundDesc) nodeInfo;

			selectorDeFichero.setSelectedFile(new File(""));
			int returnVal = selectorDeFichero.showOpenDialog(this);

			if (returnVal == JFileChooser.APPROVE_OPTION) {
				File file = selectorDeFichero.getSelectedFile();

				progressLabel.setText("Importando Vls:");
				NodesWorker createNodes = new NodesWorker(fundService, arbolFondos, arbolFondos2, top, top2,
						progressLabel);
				createNodes.addPropertyChangeListener(progressBarListener);

				ImportFundWorker importFundVls = new ImportFundWorker(fundService, progressLabel, progressBar,
						createNodes, file);
				importFundVls.setImportVls(fundDesc, "dd/MM/yyyy");
				importFundVls.addPropertyChangeListener(progressBarListener);

				importFundVls.execute();

			} else {

			}
		}

	}

	// Seleccionar un fondo en el scroll de la ventana de la tabla de
	// operaciones
	private void selFondoDesplActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();
		Object nodeInfo = node.getUserObject();
		FundPort fundPort = (FundPort) nodeInfo;

		DefaultTableModel model = (DefaultTableModel) opTabla.getModel();
		model.setRowCount(0);

		List<PortOp> portOpsOfPortfolio = null;

		FundDesc fundDesc = (FundDesc) selFondoDespl.getSelectedItem();

		if (fundDesc == null) {

			tablaOps.setVisible(false);
			return;

		}

		try {
			portOpsOfPortfolio = fundService.findAllPortOp(fundPort, fundDesc);
		} catch (InstanceNotFoundException e) {
			JOptionPane.showMessageDialog(ventanaError, e.getMessage(), "Error de entrada", JOptionPane.ERROR_MESSAGE);
			return;
		}

		for (int x = 0; x < portOpsOfPortfolio.size(); x++) {

			PortOp portOp = portOpsOfPortfolio.get(x);
			Integer partOp = portOp.getfPartOp();
			String string = "";

			if (partOp < 0) {
				partOp = Math.abs(partOp);
				string = "Venta";
			} else {
				string = "Compra";
			}

			model.addRow(new Object[] { portOp, string, partOp, String.format("%.4f", portOp.getfPrice()),
					portOp.getfPartfin() });
		}

		opTabla.setVisible(true);

	}

	// Seleccionar una grafica en el scroll de la ventana principal
	private void graficasBoxActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();

		FundDesc fundDesc = null;
		FundPort fundPort = null;

		for (int x = 0; x < workers.size(); x++) {

			workers.get(x).cancel(true);
			workers.remove(x);
			try {
				Thread.sleep(200);
			} catch (InterruptedException e) {
				continue;
			}

		}

		if (node == null) {
			JOptionPane.showMessageDialog(ventanaError, "Seleccione un fondo o una cartera.", "Error",
					JOptionPane.ERROR_MESSAGE);
			return;
		}
		Object nodeInfo = node.getUserObject();

		principalBoton1.setVisible(false);
		principalBoton2.setVisible(false);
		principalBoton3.setVisible(false);

		desdeDate.setVisible(false);
		hastaDate.setVisible(false);

		desdeLabel.setVisible(false);
		hastaLabel.setVisible(false);

		rentaText.setVisible(false);
		rentaEstimadaLabel.setVisible(false);
		calcularBoton.setVisible(false);

		if (nodeInfo.getClass() == tfg.app.model.entities.FundDesc.class) {

			fundDesc = (FundDesc) nodeInfo;

			if (fundDesc.getFundVls().size() != 0) {

				LocalDate date1 = fundDesc.getFundVls().get(0).getDay();
				LocalDate date2 = fundDesc.getFundVls().get(fundDesc.getFundVls().size() - 1).getDay();

				model1.setDate(date1.getYear(), date1.getMonthValue() - 1, date1.getDayOfMonth());
				model2.setDate(date2.getYear(), date2.getMonthValue() - 1, date2.getDayOfMonth());

			} else {

				LocalDate date1 = LocalDate.now();
				LocalDate date2 = LocalDate.now();

				model1.setDate(date1.getYear(), date1.getMonthValue() - 1, date1.getDayOfMonth());
				model2.setDate(date2.getYear(), date2.getMonthValue() - 1, date2.getDayOfMonth());

			}

			if (graficasBox.getSelectedItem().equals("Historial Vl")) {

				desdeDate.setVisible(true);
				hastaDate.setVisible(true);

				desdeLabel.setVisible(true);
				hastaLabel.setVisible(true);

				ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
				worker.setFundVlLineChart(fundDesc, null, null);
				worker.execute();

			}

			if (graficasBox.getSelectedItem().equals("Descripción")) {

				descripcionTex.setText(
						"Descripción del fondo " + fundDesc.getfName() + " y métricas simples de rendimiento.");
				showFundDesc(fundDesc, panelGraficas);

			}

			if (graficasBox.getSelectedItem().equals("Hist Renta")) {

				ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
				worker.setFundDescProfitBarChart(fundDesc);
				worker.execute();

			}

			if (graficasBox.getSelectedItem().equals("Renta Esperada")) {

				// final-inicial/inicial x 100
				desdeDate.setVisible(true);
				hastaDate.setVisible(true);

				desdeLabel.setVisible(true);
				hastaLabel.setVisible(true);

				rentaText.setVisible(true);
				rentaEstimadaLabel.setVisible(true);
				calcularBoton.setVisible(true);
				rentaText.setValue(0);

				Date input = (Date) model1.getValue();
				LocalDate date1 = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

				input = (Date) model2.getValue();
				LocalDate date2 = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

				ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
				worker.setEstimateProfitOfFundDescLineChart(fundDesc, null, date1, date2);
				worker.execute();

			}

			if (graficasBox.getSelectedItem().equals("Media Móvil")) {

				// final-inicial/inicial x 100

				principalBoton1.setVisible(true);
				principalBoton2.setVisible(true);
				principalBoton3.setVisible(true);

				principalBoton1.setSelected(true);

				ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
				worker.setFundDescMeanMobileLineChart(fundDesc, 30);
				worker.execute();

			}
		} else {

			if (nodeInfo.getClass() == tfg.app.model.entities.FundPort.class) {

				fundPort = (FundPort) nodeInfo;

				if (graficasBox.getSelectedItem().equals("Distribución")) {

					ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
					worker.setPortfolioDistributionChart(fundPort);
					worker.execute();

				}

				if (graficasBox.getSelectedItem().equals("Fondos Norm")) {

					ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
					worker.setFundDescsOfPortfolioNormalizedLineChart(fundPort);
					worker.execute();
				}

				if (graficasBox.getSelectedItem().equals("Rent de los fondos")) {

					ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
					worker.setPortfolioMostProfitableFundsBarChart(fundPort);
					worker.execute();

				}

				if (graficasBox.getSelectedItem().equals("Rent total")) {

					principalBoton1.setVisible(true);
					principalBoton2.setVisible(true);
					principalBoton3.setVisible(true);

					principalBoton1.setSelected(true);

					showProgressBar(panelGraficas);

					ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
					worker.setProfitOfPortfolioLineChart(fundPort, LocalDate.now().minusDays(30), LocalDate.now());
					worker.addPropertyChangeListener(progresoGraficaListener);
					workers.add(worker);
					worker.execute();

				}

				if (graficasBox.getSelectedItem().equals("Comparativa")) {

					ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
					worker.setPortfolioFundsValueBarChart(fundPort);
					worker.execute();

				}
			}
		}
	}

	// Boton calcular de la pantalla principal
	private void calcularBotonActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();

		Object nodeInfo = node.getUserObject();

		if (nodeInfo.getClass() == tfg.app.model.entities.FundDesc.class) {

			FundDesc fundDesc = (FundDesc) nodeInfo;

			LocalDate date1;
			try {

				Date input = (Date) model1.getValue();
				date1 = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

			} catch (NullPointerException e) {

				date1 = fundDesc.getFundVls().get(0).getDay();
				model1.setDate(date1.getYear(), date1.getMonthValue() - 1, date1.getDayOfMonth());

			}
			LocalDate date2;
			try {

				Date input = (Date) model2.getValue();
				date2 = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

			} catch (NullPointerException e) {

				date2 = fundDesc.getFundVls().get(fundDesc.getFundVls().size() - 1).getDay();
				model2.setDate(date2.getYear(), date2.getMonthValue() - 1, date2.getDayOfMonth());

			}

			Double rent = null;

			if (Double.valueOf(rentaText.getValue().toString()) != 0) {

				rent = Double.valueOf(rentaText.getValue().toString());

			}

			ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
			worker.setEstimateProfitOfFundDescLineChart(fundDesc, rent, date1, date2);
			worker.execute();

		}

	}

	// Seleccionar un boton de los días de la pantalla principal
	private void principalBotonActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedTree.getLastSelectedPathComponent();

		int days = 30;

		if (principalBoton1.isSelected()) {

			days = 30;

		} else if (principalBoton2.isSelected()) {

			days = 90;

		} else {

			days = 200;

		}

		if (node == null) {

			JOptionPane.showMessageDialog(ventanaError, "Seleccione un fondo o una cartera.", "Error",
					JOptionPane.ERROR_MESSAGE);
			return;
		}
		Object nodeInfo = node.getUserObject();

		if (nodeInfo.getClass() == tfg.app.model.entities.FundDesc.class) {

			FundDesc fundDesc = (FundDesc) nodeInfo;

			if (graficasBox.getSelectedItem().equals("Media Móvil")) {

				ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
				worker.setFundDescMeanMobileLineChart(fundDesc, days);
				worker.execute();

			}

		} else if (nodeInfo.getClass() == tfg.app.model.entities.FundPort.class) {

			FundPort fundPort = (FundPort) nodeInfo;

			if (graficasBox.getSelectedItem().equals("Rent total")) {

				for (int x = 0; x < workers.size(); x++) {

					workers.get(x).cancel(true);
					workers.remove(x);
					try {
						Thread.sleep(200);
					} catch (InterruptedException e) {
						continue;
					}

				}

				showProgressBar(panelGraficas);

				ChartWorker worker = new ChartWorker(fundService, panelGraficas, descripcionTex);
				worker.setProfitOfPortfolioLineChart(fundPort, LocalDate.now().minusDays(days), LocalDate.now());
				worker.addPropertyChangeListener(progresoGraficaListener);
				workers.add(worker);
				worker.execute();

			}
		}
	}

	private void showProgressBar(JPanel panel) {

		panel.removeAll();
		panel.updateUI();

		javax.swing.GroupLayout panelGraficasLayout = new javax.swing.GroupLayout(panelGraficas);
		panelGraficas.setLayout(panelGraficasLayout);
		panelGraficasLayout
				.setHorizontalGroup(panelGraficasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
								panelGraficasLayout.createSequentialGroup()
										.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(progresoGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, 572,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		panelGraficasLayout
				.setVerticalGroup(panelGraficasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(panelGraficasLayout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(progresoGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

	}

	private void showFundDesc(FundDesc fundDesc, JPanel panel) {

		panel.removeAll();
		panel.updateUI();

		nombreDesc.setText("Nombre: " + fundDesc.getfName());

		isinDesc.setText("ISIN: " + fundDesc.getfId());

		gestoraDesc.setText("Gestora: " + fundDesc.getfGest());

		catDesc.setText("Categoría: " + fundDesc.getfCategory());

		divisaDesc.setText("Divisa: " + fundDesc.getfCurrency());

		apComDesc.setText("Comisión de apertura: " + fundDesc.getfSubComm() * 100 + "%");

		canComDesc.setText("Comisión de cancelación: " + fundDesc.getfCancelComm() * 100 + "%");

		alphaDesc.setText("Alfa: ");

		betaDesc.setText("Beta: ");

		double sumatoria = 0;

		int size = fundDesc.getFundVls().size();

		if (size == 0) {

			varDesc.setText("Desviación estandar: El fondo no tiene ningún vl.");
			drawDesc.setText("Máximo Drawdown: El fondo no tiene ningún vl.");

		} else {

			List<Double> rentAnual = new ArrayList<Double>();

			FundVl vlInicial = fundDesc.getFundVls().get(0);

			FundVl vlFinal = fundDesc.getFundVls().get(fundDesc.getFundVls().size() - 1);

			LocalDate date = vlFinal.getDay().minusYears(1);

			while (date.isAfter(vlInicial.getDay())) {

				FundVl fundVlFinal = fundService.findLatestFundVl(fundDesc, date.plusYears(1));
				FundVl fundVlInicial = fundService.findLatestFundVl(fundDesc, date);

				double profit = (fundVlFinal.getVl() - fundVlInicial.getVl()) / fundVlInicial.getVl();

				rentAnual.add(profit * 100);

				date = date.minusYears(1);

			}

			int size2 = rentAnual.size();

			for (int x = 0; x < size2; x++) {

				sumatoria = sumatoria + rentAnual.get(x);

			}

			double media = sumatoria / size2;

			alphaDesc.setText("Media rentabilidades anuales: " + String.format("%.3f", media));

			double varianza = 0;

			for (int i = 0; i < size2; i++) {
				double rango;
				rango = Math.pow(rentAnual.get(i) - media, 2);
				varianza = varianza + rango;
			}

			varianza = varianza / size2;

			double desviacion = Math.sqrt(varianza);

			varDesc.setText("Desviación estandar: " + String.format("%.3f", desviacion));

			vlInicial = fundDesc.getFundVls().get(0);

			vlFinal = fundDesc.getFundVls().get(fundDesc.getFundVls().size() - 1);

			double d = fundDesc.getFundVls().size();

			double rentDiaria = (Math.pow(vlFinal.getVl() / vlInicial.getVl(), (365 / d))) - 1;

			double sharpe = (rentDiaria * 100 - 0.5) / desviacion;

			betaDesc.setText("Ratio Sharpe: " + String.format("%.3f", sharpe));

			int maxRelativo = 0;
			int minRelativo = 0;
			int maxFinal = 0;
			int minFinal = 0;

			for (int x = 0; x < size; x++) {

				if (fundDesc.getFundVls().get(x).getVl() >= fundDesc.getFundVls().get(maxRelativo).getVl()) {

					maxRelativo = x;
					minRelativo = x;

				} else {
					// mientras
					int y = 0;
					for (y = x; ((y < fundDesc.getFundVls().size()) && (fundDesc.getFundVls().get(maxRelativo)
							.getVl() >= fundDesc.getFundVls().get(y).getVl())); y++) {

						if (fundDesc.getFundVls().get(y).getVl() <= fundDesc.getFundVls().get(minRelativo).getVl()) {

							minRelativo = y;

						}

					}

					if (y != size) {

						if ((fundDesc.getFundVls().get(maxRelativo).getVl() - fundDesc.getFundVls().get(minRelativo)
								.getVl()) > (fundDesc.getFundVls().get(maxFinal).getVl()
										- fundDesc.getFundVls().get(minFinal).getVl())) {

							maxFinal = maxRelativo;
							minFinal = minRelativo;

						}
					}

					maxRelativo = y;
					minRelativo = y;
					x = y;

				}

			}

			if (maxFinal == 0 && minFinal == 0) {

				drawDesc.setText("Máximo Drawdown: No se ha podido calcular para este fondo.");

			} else {
				drawDesc.setText("Máximo Drawdown: "
						+ String.format("%.3f",
								((fundDesc.getFundVls().get(minFinal).getVl()
										- fundDesc.getFundVls().get(maxFinal).getVl())
										/ fundDesc.getFundVls().get(maxFinal).getVl()) * 100)
						+ "% entre los días: " + fundDesc.getFundVls().get(maxFinal).getDay() + " y "
						+ fundDesc.getFundVls().get(minFinal).getDay());
			}

		}

		javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
		panel.setLayout(panelLayout);
		panelLayout.setHorizontalGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelLayout.createSequentialGroup().addContainerGap()
						.addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(nombreDesc).addComponent(isinDesc).addComponent(gestoraDesc)
								.addComponent(catDesc).addComponent(divisaDesc).addComponent(apComDesc)
								.addComponent(canComDesc).addComponent(alphaDesc).addComponent(betaDesc)
								.addComponent(varDesc).addComponent(drawDesc))
						.addContainerGap(614, Short.MAX_VALUE)));

		panelLayout.setVerticalGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelLayout.createSequentialGroup().addContainerGap().addComponent(nombreDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(isinDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(gestoraDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(catDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(divisaDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(apComDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(canComDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(alphaDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(betaDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(varDesc)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(drawDesc)
						.addContainerGap(401, Short.MAX_VALUE)));
	}

	// private static void createDbExample() {
	//
	// FundDesc fundDesc1 = new FundDesc("DE0008490962", "Renta 4 Bolsa FI",
	// "Pinball Wizards", "Alto riesgo",
	// "Monetario", "Euro", 0.01, 0.02);
	// FundDesc fundDesc2 = new FundDesc("ES0173394034", "Global Trends, FI",
	// "Pinball Wizards", "Alto riesgo",
	// "Monetario", "Euro", 0.01, 0.02);
	// FundDesc fundDesc3 = new FundDesc("ES0180792006", "True Value Fi",
	// "Pinball Wizards", "Alto riesgo",
	// "Monetario", "Euro", 0.01, 0.02);
	// FundDesc fundDesc4 = new FundDesc("ES0168812032", "Patrisa Fi", "Pinball
	// Wizards", "Alto riesgo", "Monetario",
	// "Euro", 0.01, 0.02);
	// FundDesc fundDesc5 = new FundDesc("ES0167198003", "Ohana Europe Fi",
	// "Pinball Wizards", "Alto riesgo",
	// "Monetario", "Euro", 0.01, 0.02);
	// FundDesc fundDesc6 = new FundDesc("ES0112231008", "Avantage Fund, Fi",
	// "Pinball Wizards", "Alto riesgo",
	// "Monetario", "Euro", 0.01, 0.02);
	// FundDesc fundDesc7 = new FundDesc("ES0140963002", "Algar Global Fund Fi",
	// "Pinball Wizards", "Alto riesgo",
	// "Monetario", "Euro", 0.01, 0.02);
	// FundDesc fundDesc8 = new FundDesc("ES0116848005", "Fondo Sin Nada",
	// "Pinball Wizards", "Alto riesgo",
	// "Monetario", "Euro", 0.01, 0.02);
	//
	// FundPort fundPort1 = new FundPort("Cartera Test 1", "Esto es una cartera
	// de prueba");
	// FundPort fundPort2 = new FundPort("Cartera Test 2", "Esto es una cartera
	// de prueba");
	//
	// LocalDate date = LocalDate.parse("2014-01-01");
	// double start = 100.0;
	//
	// while (date.isBefore(LocalDate.now())) {
	// date = date.plusDays(1);
	// fundDesc1.getFundVls()
	// .add(new FundVl(date, start += ThreadLocalRandom.current().nextDouble(-1,
	// 1), fundDesc1));
	// fundDesc3.getFundVls()
	// .add(new FundVl(date, start += ThreadLocalRandom.current().nextDouble(-1,
	// 1), fundDesc3));
	// fundDesc5.getFundVls()
	// .add(new FundVl(date, start += ThreadLocalRandom.current().nextDouble(-1,
	// 1), fundDesc5));
	// fundDesc7.getFundVls()
	// .add(new FundVl(date, start += ThreadLocalRandom.current().nextDouble(-1,
	// 1), fundDesc7));
	// }
	//
	// date = LocalDate.parse("2015-05-30");
	// start = 70.0;
	//
	// while (date.isBefore(LocalDate.now())) {
	// date = date.plusDays(1);
	// fundDesc2.getFundVls()
	// .add(new FundVl(date, start += ThreadLocalRandom.current().nextDouble(-1,
	// 1), fundDesc2));
	// fundDesc4.getFundVls()
	// .add(new FundVl(date, start += ThreadLocalRandom.current().nextDouble(-1,
	// 1), fundDesc4));
	// fundDesc6.getFundVls()
	// .add(new FundVl(date, start += ThreadLocalRandom.current().nextDouble(-1,
	// 1), fundDesc6));
	// }
	//
	// PortOp portOp = new PortOp(LocalDate.parse("2017-01-28"), fundPort1,
	// fundDesc1, 100);
	// PortOp portOp1 = new PortOp(LocalDate.parse("2017-01-28"), fundPort1,
	// fundDesc2, 100);
	//
	// PortOp portOp2 = new PortOp(LocalDate.parse("2017-01-28"), fundPort2,
	// fundDesc1, 100);
	// PortOp portOp3 = new PortOp(LocalDate.parse("2017-01-28"), fundPort2,
	// fundDesc2, 100);
	// PortOp portOp4 = new PortOp(LocalDate.parse("2017-01-28"), fundPort2,
	// fundDesc3, 100);
	// PortOp portOp5 = new PortOp(LocalDate.parse("2017-01-28"), fundPort2,
	// fundDesc4, 100);
	// PortOp portOp6 = new PortOp(LocalDate.parse("2017-01-28"), fundPort2,
	// fundDesc5, 100);
	// PortOp portOp7 = new PortOp(LocalDate.parse("2017-01-28"), fundPort2,
	// fundDesc6, 100);
	// PortOp portOp8 = new PortOp(LocalDate.parse("2017-01-28"), fundPort2,
	// fundDesc7, 100);
	//
	// try {
	//
	// fundService.addFund(fundDesc1);
	// fundService.addFund(fundDesc2);
	// fundService.addFund(fundDesc3);
	// fundService.addFund(fundDesc4);
	// fundService.addFund(fundDesc5);
	// fundService.addFund(fundDesc6);
	// fundService.addFund(fundDesc7);
	// fundService.addFund(fundDesc8);
	//
	// fundService.addFundPortfolio(fundPort1);
	// fundService.addFundPortfolio(fundPort2);
	//
	// fundService.addPortDesc(fundPort1, fundDesc1);
	// fundService.addPortDesc(fundPort1, fundDesc2);
	// fundService.addPortDesc(fundPort1, fundDesc8);
	//
	// fundService.addPortDesc(fundPort2, fundDesc1);
	// fundService.addPortDesc(fundPort2, fundDesc2);
	// fundService.addPortDesc(fundPort2, fundDesc3);
	// fundService.addPortDesc(fundPort2, fundDesc4);
	// fundService.addPortDesc(fundPort2, fundDesc5);
	// fundService.addPortDesc(fundPort2, fundDesc6);
	// fundService.addPortDesc(fundPort2, fundDesc7);
	//
	// fundService.addPortOp(portOp);
	// fundService.addPortOp(portOp1);
	// fundService.addPortOp(portOp2);
	// fundService.addPortOp(portOp3);
	// fundService.addPortOp(portOp4);
	// fundService.addPortOp(portOp5);
	// fundService.addPortOp(portOp6);
	// fundService.addPortOp(portOp7);
	// fundService.addPortOp(portOp8);
	//
	// } catch (InputValidationException e) {
	// //
	// e.printStackTrace();
	// } catch (InstanceNotFoundException e) {
	// //
	// e.printStackTrace();
	// }
	// }

	// Main de la app
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		fundService = new FundServiceImpl();

		// createDbExample();

		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Gui().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	////////////////////////////////////////////

	private DefaultMutableTreeNode top;
	private DefaultMutableTreeNode top2;
	private static FundService fundService = null;
	private javax.swing.JComboBox<FundDesc> fondoDesplegable;
	private javax.swing.JComboBox<FundDesc> fondoDesplegable1;
	private javax.swing.JComboBox<FundDesc> fondoDesplegable2;
	private javax.swing.JComboBox<FundDesc> selFondoDespl;

	////////////////////////////////////////////

	private javax.swing.JButton aceptAnFondoCartBoton;
	private javax.swing.JButton aceptBoFondoCartBoton;
	private javax.swing.JButton aceptarConfirBoton;
	private javax.swing.JMenuItem actuOp;
	private javax.swing.JMenuItem actuVl;
	private javax.swing.JDialog actuaCartera;
	private javax.swing.JDialog actuaFondo;
	private javax.swing.JButton actuaFondoBoton1;
	private javax.swing.JDialog actuaOp;
	private javax.swing.JDialog actuaVl;
	private javax.swing.JMenuItem actualizarCartera;
	private javax.swing.JMenuItem actualizarFondo;
	private javax.swing.JMenuItem anFondoAcartera;
	private javax.swing.JMenuItem anOperacion;
	private javax.swing.JButton anaCarteraBoton;
	private javax.swing.JButton anaCarteraBoton1;
	private javax.swing.JButton anadFondoBoton;
	private javax.swing.JMenuItem anadVlaFondo;
	private javax.swing.JDialog anadirCartera;
	private javax.swing.JDialog anadirFondo;
	private javax.swing.JDialog anadirFondoCartera;
	private javax.swing.JDialog anadirOp;
	private javax.swing.JDialog anadirVl;
	private javax.swing.JLabel apComLabel;
	private javax.swing.JLabel apComLabel1;
	private javax.swing.JFormattedTextField apComText;
	private javax.swing.JFormattedTextField apComText1;
	private javax.swing.JTree arbolFondos;
	private javax.swing.JTree arbolFondos2;
	private javax.swing.JMenuBar barraMenu;
	private javax.swing.JMenuItem borrarCartera;
	private javax.swing.JMenuItem borrarFondo;
	private javax.swing.JDialog borrarFondoCartera;
	private javax.swing.JMenuItem borrarOp;
	private javax.swing.JMenuItem borrarVl;
	private javax.swing.JMenuItem botonAnadirCartera;
	private javax.swing.JMenuItem botonAnadirFondo;
	private javax.swing.JLabel buscarLabel;
	private javax.swing.JTextField buscarText;
	private javax.swing.JButton canActuaFondoBoton1;
	private javax.swing.JButton canAnFondoCartBoton;
	private javax.swing.JButton canAnaCarteraBoton;
	private javax.swing.JButton canAnaCarteraBoton1;
	private javax.swing.JButton canAnaFondoBoton;
	private javax.swing.JButton canBoFondoCartBoton;
	private javax.swing.JLabel cancelComLabel;
	private javax.swing.JLabel cancelComLabel1;
	private javax.swing.JFormattedTextField cancelComText;
	private javax.swing.JFormattedTextField cancelComText1;
	private javax.swing.JButton cancelarConfirBoton;
	private javax.swing.JLabel carteraLabel;
	private javax.swing.JLabel carteraLabel1;
	private javax.swing.JPopupMenu carteraMenu;
	private javax.swing.JLabel categoriaLabel;
	private javax.swing.JLabel categoriaLabel1;
	private javax.swing.JTextField categoriaText;
	private javax.swing.JTextField categoriaText1;
	private javax.swing.JLabel confirmacionLabel;
	private javax.swing.JLabel descCarteraLabel;
	private javax.swing.JLabel descCarteraLabel1;
	private javax.swing.JTextArea descCarteraText;
	private javax.swing.JTextArea descCarteraText1;
	private javax.swing.JLabel divisaLabel;
	private javax.swing.JLabel divisaLabel1;
	private javax.swing.JTextField divisaText;
	private javax.swing.JTextField divisaText1;
	private javax.swing.JMenuItem elFondoCartera;
	private javax.swing.JPopupMenu fondoMenu;
	private javax.swing.JMenuItem anadirVlExcel;
	private javax.swing.JLabel gestoraLabel;
	private javax.swing.JLabel gestoraLabel1;
	private javax.swing.JTextField gestoraText;
	private javax.swing.JTextField gestoraText1;
	private javax.swing.JLabel isinLabel;
	private javax.swing.JLabel isinLabel1;
	private javax.swing.JTextField isinText;
	private javax.swing.JMenu jMenu3;
	private javax.swing.JMenu jMenu4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JScrollPane jScrollPane5;
	private javax.swing.JLabel nomCarteraLabel;
	private javax.swing.JLabel nomCarteraLabel1;
	private javax.swing.JTextField nomCarteraText;
	private javax.swing.JTextField nomCarteraText1;
	private javax.swing.JButton opAccBoton;
	private javax.swing.JButton opAccBoton1;
	private javax.swing.JButton opCancBoton;
	private javax.swing.JButton opCancBoton1;
	private javax.swing.JLabel opCarteraLabel;
	private javax.swing.JLabel opCarteraLabel1;
	private javax.swing.JLabel opFechaLabel;
	private javax.swing.JLabel opFechaLabel1;
	private javax.swing.JLabel opIsinLabel1;
	private javax.swing.JPopupMenu opMenu;
	private javax.swing.JLabel opOperacionLabel;
	private javax.swing.JLabel opOperacionLabel1;
	private javax.swing.JFormattedTextField opOperacionText;
	private javax.swing.JFormattedTextField opOperacionText1;
	private javax.swing.JTable opTabla;
	private javax.swing.JLabel selFondoLabel;
	private javax.swing.JDialog tablaOps;
	private javax.swing.JDialog tablaVls;
	private javax.swing.JLabel tipoLabel;
	private javax.swing.JLabel tipoLabel1;
	private javax.swing.JTextField tipoText;
	private javax.swing.JTextField tipoText1;
	private javax.swing.JDialog ventanaConfirmacion;
	private javax.swing.JOptionPane ventanaError;
	private javax.swing.JMenuItem verOperaciones;
	private javax.swing.JButton vlAccBoton;
	private javax.swing.JButton vlAccBoton1;
	private javax.swing.JButton vlCancBoton;
	private javax.swing.JButton vlCancBoton1;
	private javax.swing.JLabel vlFechaLabel;
	private javax.swing.JLabel vlFechaLabel1;
	private javax.swing.JLabel vlIsinIdLabel;
	private javax.swing.JLabel vlIsinLabel;
	private javax.swing.JLabel vlIsinLabel1;
	private javax.swing.JPopupMenu vlMenu;
	private javax.swing.JTable vlTabla;
	private javax.swing.JLabel vlVlLabel;
	private javax.swing.JLabel vlVlLabel1;
	private javax.swing.JFormattedTextField vlVlText;
	private javax.swing.JFormattedTextField vlVlText1;
	private javax.swing.JMenuItem verVl;
	private javax.swing.JPanel panelGraficas;
	private javax.swing.JComboBox<String> graficasBox;
	private javax.swing.JLabel nombreLabel;
	private javax.swing.JTextField nombreText;
	private javax.swing.JRadioButton ventaBoton;
	private javax.swing.JRadioButton compraBoton;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.ButtonGroup buttonGroup2;
	private javax.swing.JLabel nombreDesc;
	private javax.swing.JLabel isinDesc;
	private javax.swing.JLabel gestoraDesc;
	private javax.swing.JLabel catDesc;
	private javax.swing.JLabel divisaDesc;
	private javax.swing.JLabel apComDesc;
	private javax.swing.JLabel canComDesc;
	private javax.swing.JLabel alphaDesc;
	private javax.swing.JLabel betaDesc;
	private javax.swing.JLabel varDesc;
	private javax.swing.JLabel drawDesc;
	private javax.swing.JLabel vlIsinLabel2;
	private javax.swing.JLabel vlFechaLabel2;
	private javax.swing.JScrollPane jScrollPane6;
	private javax.swing.JEditorPane descripcionTex;
	private JDatePickerImpl desdeDate;
	private JDatePickerImpl hastaDate;
	private JDatePickerImpl opDate;
	private javax.swing.JLabel desdeLabel;
	private javax.swing.JLabel hastaLabel;
	private javax.swing.JFileChooser selectorDeFichero;
	private javax.swing.JMenuItem exportarExcel;
	private UtilDateModel model1;
	private UtilDateModel model2;
	private UtilDateModel model3;
	private javax.swing.JMenuItem importarFondo;
	private javax.swing.JRadioButton compraBoton1;
	private javax.swing.JRadioButton ventaBoton1;
	private javax.swing.JLabel opFechaLabel2;
	private javax.swing.JLabel isinLabel2;
	private javax.swing.JLabel nombreLabel1;
	private javax.swing.JTextField nombreText1;
	private javax.swing.JRadioButton principalBoton1;
	private javax.swing.JRadioButton principalBoton2;
	private javax.swing.JRadioButton principalBoton3;
	private javax.swing.JLabel rentaEstimadaLabel;
	private javax.swing.JFormattedTextField rentaText;
	private javax.swing.JButton calcularBoton;
	private javax.swing.JProgressBar progresoGrafica;
	private PropertyChangeListener progresoGraficaListener;
	private PropertyChangeListener progressBarListener;
	private List<SwingWorker> workers;
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JLabel progressLabel;
	private javax.swing.JTree selectedTree;
	private MouseAdapter treeMouseAdapter;
	private TreeSelectionListener treeSelectionListener;
	// End of variables declaration
}